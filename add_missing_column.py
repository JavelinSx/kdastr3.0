#!/usr/bin/env python3
"""
–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ created_at
"""
import sqlite3
import os
from datetime import datetime

def force_add_created_at():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É created_at"""
    db_path = "kadastr.db"
    
    if not os.path.exists(db_path):
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    print("üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ created_at")
    print("=" * 50)
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        print("üìã –¢–µ–∫—É—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ info_client:")
        cursor.execute('PRAGMA table_info(info_client)')
        columns = cursor.fetchall()
        
        existing_columns = []
        for col in columns:
            print(f"   {col[1]} ({col[2]})")
            existing_columns.append(col[1])
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ created_at
        if 'created_at' in existing_columns:
            print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ created_at —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            conn.close()
            return True
        
        # 3. –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É
        print("\nüî® –î–æ–±–∞–≤–ª—è—é –∫–æ–ª–æ–Ω–∫—É created_at...")
        try:
            cursor.execute('ALTER TABLE info_client ADD COLUMN created_at DATETIME')
            print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        except Exception as e:
            if "duplicate column" in str(e).lower():
                print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–ø–æ –æ—à–∏–±–∫–µ)")
            else:
                raise e
        
        # 4. –ó–∞–ø–æ–ª–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        print("üìÖ –ó–∞–ø–æ–ª–Ω—è—é –∫–æ–ª–æ–Ω–∫—É –¥–∞—Ç–∞–º–∏...")
        current_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        cursor.execute("UPDATE info_client SET created_at = ? WHERE created_at IS NULL", (current_date,))
        updated_rows = cursor.rowcount
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {updated_rows}")
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cursor.execute('PRAGMA table_info(info_client)')
        columns_after = cursor.fetchall()
        print(f"\nüìã –ö–æ–ª–æ–Ω–∫–∏ –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:")
        for col in columns_after:
            print(f"   {col[1]} ({col[2]})")
        
        # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
        cursor.execute("SELECT COUNT(*) FROM info_client WHERE created_at IS NOT NULL")
        count_with_date = cursor.fetchone()[0]
        print(f"\nüìä –ó–∞–ø–∏—Å–µ–π —Å –¥–∞—Ç–æ–π: {count_with_date}")
        
        conn.commit()
        conn.close()
        
        print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ created_at —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_flask_models():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É Flask –º–æ–¥–µ–ª–µ–π –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Flask –º–æ–¥–µ–ª–µ–π...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Flask –º–æ–¥–µ–ª–∏
        import sys
        import os
        sys.path.append(os.getcwd())
        
        from app import create_app, db
        from app.models import Client
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = create_app()
        
        with app.app_context():
            # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤
            count = Client.query.count()
            print(f"‚úÖ Flask –≤–∏–¥–∏—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤: {count}")
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã—Ö 5
            clients = Client.query.limit(5).all()
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(clients)}")
            
            for client in clients:
                print(f"   {client.id}: {client.full_name} (–¥–∞—Ç–∞: {client.created_at})")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Flask: {e}")
        return False

def main():
    print("üõ†Ô∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–π –∫–æ–ª–æ–Ω–∫–∏ created_at")
    print("=" * 60)
    
    if force_add_created_at():
        print("\n" + "=" * 60)
        test_flask_models()
        print("\n‚ñ∂Ô∏è –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python run.py")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É")

if __name__ == '__main__':
    main()