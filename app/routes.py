from flask import Blueprint, render_template, request, jsonify, redirect, url_for, flash, send_from_directory
from app import db
from app.models import Client, AddressInfo, WorkInfo, DocInfo, DocFillInfo, City
from datetime import datetime
import os
import shutil
import subprocess
import platform
import socket
import psutil

bp = Blueprint('main', __name__)

def get_network_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏"""
    import socket
    
    network_info = {
        'localhost': '127.0.0.1',
        'network_addresses': [],
        'is_accessible_from_network': False,
        'port': 5000
    }
    
    print("üîç get_network_info: –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É")
    
    try:
        # –°–ø–æ—Å–æ–± 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º socket –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö IP
        local_ips = []
        
        # –ü–æ–ª—É—á–∞–µ–º IP —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        methods = [
            ("Google DNS", "8.8.8.8", 80),
            ("Cloudflare DNS", "1.1.1.1", 80),
            ("Router Gateway", "192.168.1.1", 80),
            ("Router Gateway Alt", "192.168.0.1", 80)
        ]
        
        for method_name, target_ip, port in methods:
            try:
                s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
                s.settimeout(1)  # –¢–∞–π–º–∞—É—Ç 1 —Å–µ–∫—É–Ω–¥–∞
                s.connect((target_ip, port))
                local_ip = s.getsockname()[0]
                s.close()
                
                if local_ip and local_ip != '127.0.0.1' and local_ip not in local_ips:
                    local_ips.append(local_ip)
                    print(f"üîç {method_name}: –Ω–∞–π–¥–µ–Ω IP {local_ip}")
                    
            except Exception as e:
                print(f"üîç {method_name}: –æ—à–∏–±–∫–∞ {e}")
                continue
        
        # –°–ø–æ—Å–æ–± 2: –ï—Å–ª–∏ psutil –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        try:
            import psutil
            print("üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º psutil –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏")
            
            for interface_name, interface_addresses in psutil.net_if_addrs().items():
                for address in interface_addresses:
                    if address.family == socket.AF_INET:  # IPv4
                        ip = address.address
                        if (ip != '127.0.0.1' and 
                            not ip.startswith('169.254') and  # Link-local
                            ip not in local_ips):
                            local_ips.append(ip)
                            print(f"üîç psutil {interface_name}: –Ω–∞–π–¥–µ–Ω IP {ip}")
        except ImportError:
            print("üîç psutil –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ socket")
        except Exception as e:
            print(f"üîç –û—à–∏–±–∫–∞ psutil: {e}")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º IP –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–ª–æ–∫–∞–ª—å–Ω–∞—è —Å–µ—Ç—å –ø–µ—Ä–≤–∞—è)
        def ip_priority(ip):
            """–û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç IP –∞–¥—Ä–µ—Å–∞"""
            if ip.startswith('192.168.'):
                return 1  # –í—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            elif ip.startswith('10.'):
                return 2  # –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            elif ip.startswith('172.'):
                if 16 <= int(ip.split('.')[1]) <= 31:
                    return 2  # –ß–∞—Å—Ç–Ω–∞—è —Å–µ—Ç—å 172.16-31.x.x
                return 3
            else:
                return 3  # –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º IP –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        local_ips_sorted = sorted(set(local_ips), key=ip_priority)
        print(f"üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ IP (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ): {local_ips_sorted}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º IP –∞–¥—Ä–µ—Å–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        for ip in local_ips_sorted:
            interface_name = "Primary Network"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–µ—Ç–∏
            if ip.startswith('192.168.'):
                interface_name = "Local Network (192.168.x.x)"
            elif ip.startswith('10.'):
                interface_name = "Corporate/VPN Network (10.x.x.x)"
            elif ip.startswith('172.'):
                if 16 <= int(ip.split('.')[1]) <= 31:
                    interface_name = "Private Network (172.16-31.x.x)"
            
            network_info['network_addresses'].append({
                'interface': interface_name,
                'ip': ip,
                'url': f'http://{ip}:5000'
            })
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤ —Å–µ—Ç–∏
        try:
            from flask import current_app
            host = current_app.config.get('HOST', '127.0.0.1')
            print(f"üîç Flask HOST = {host}")
            
            if host == '0.0.0.0':
                network_info['is_accessible_from_network'] = True
                print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Å–µ—Ç–∏ (HOST=0.0.0.0)")
            elif host in local_ips_sorted:
                network_info['is_accessible_from_network'] = True
                print(f"‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Å–µ—Ç–∏ (HOST={host})")
            else:
                print(f"‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ (HOST={host})")
                
        except Exception as e:
            print(f"üîç –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ HOST: {e}")
        
        print(f"üîç –ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ IP –∞–¥—Ä–µ—Å–æ–≤: {len(network_info['network_addresses'])}")
        
    except Exception as e:
        print(f"üîç –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    print(f"üîç –í–æ–∑–≤—Ä–∞—â–∞–µ–º: {network_info}")
    return network_info

# –û–±–Ω–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é settings() –≤ routes.py

@bp.route('/settings')
def settings():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    from flask import current_app
    import os
    
    print("üîç –û–¢–õ–ê–î–ö–ê: –ù–∞—á–∏–Ω–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é settings()")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    current_settings = {
        'database_path': current_app.config.get('SQLALCHEMY_DATABASE_URI', '').replace('sqlite:///', ''),
        'work_folder': current_app.config.get('WORK_FOLDER', './work_files'),
        'docs_folder': current_app.config.get('DOCS_FOLDER', './docs'),
        'host': current_app.config.get('HOST', '127.0.0.1'),
        'port': current_app.config.get('PORT', 5000)
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—É—Ç–µ–π –∏ –ü–†–ï–û–ë–†–ê–ó–£–ï–ú WindowsPath –≤ —Å—Ç—Ä–æ–∫–∏
    path_status = {}
    for key, path in current_settings.items():
        if key in ['host', 'port']:
            continue
            
        if path and path != '':
            abs_path = os.path.abspath(path)
            path_status[key] = {
                'exists': os.path.exists(abs_path),
                'is_dir': os.path.isdir(abs_path) if os.path.exists(abs_path) else False,
                'abs_path': str(abs_path),  # –ü–†–ï–û–ë–†–ê–ó–£–ï–ú –≤ —Å—Ç—Ä–æ–∫—É
                'writable': os.access(abs_path, os.W_OK) if os.path.exists(abs_path) else False
            }
        else:
            path_status[key] = {
                'exists': False,
                'is_dir': False,
                'abs_path': '',
                'writable': False
            }
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ç–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    print("üîç –û–¢–õ–ê–î–ö–ê: –í—ã–∑—ã–≤–∞–µ–º get_network_info()")
    network_info = get_network_info()
    print(f"üîç –û–¢–õ–ê–î–ö–ê: network_info = {network_info}")
    
    print("üîç –û–¢–õ–ê–î–ö–ê: –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ render_template")
    return render_template('settings.html', 
                         settings=current_settings, 
                         path_status=path_status,
                         network_info=network_info)
def simple_fuzzy_match(text1, text2, threshold=80):
    """–ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ—á–µ—Ç–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ –±–µ–∑ rapidfuzz"""
    text1 = text1.lower().strip()
    text2 = text2.lower().strip()
    
    # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if text1 == text2:
        return 100
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
    if text1 in text2 or text2 in text1:
        return 90
    
    # –ü—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
    matches = 0
    min_len = min(len(text1), len(text2))
    max_len = max(len(text1), len(text2))
    
    if max_len == 0:
        return 0
    
    for i in range(min_len):
        if text1[i] == text2[i]:
            matches += 1
    
    similarity = (matches * 100) // max_len
    return similarity

@bp.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ç–∞–±–ª–∏—Ü–µ–π –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    try:
        clients = db.session.query(Client)\
            .join(AddressInfo, Client.id == AddressInfo.id_client, isouter=True)\
            .join(City, AddressInfo.id_city == City.id, isouter=True)\
            .join(WorkInfo, Client.id == WorkInfo.id_client, isouter=True)\
            .order_by(Client.created_at.desc())\
            .all()
    except Exception:
        # –ï—Å–ª–∏ join –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        clients = Client.query.order_by(Client.created_at.desc()).all()
    
    return render_template('clients.html', clients=clients)

@bp.route('/api/clients')
def api_clients():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ (–¥–ª—è DataTables)"""
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    status_filter = request.args.get('status')
    work_filter = request.args.get('work')
    date_filter = request.args.get('date')
    search_query = request.args.get('search', '').strip()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    all_clients = Client.query.all()
    filtered_clients = []
    
    for client in all_clients:
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        if status_filter:
            if status_filter == 'ready' and (not client.work_info or client.work_info.status != 1):
                continue
            elif status_filter == 'development' and (not client.work_info or client.work_info.status != 0):
                continue
        
        if work_filter:
            if work_filter == 'ready' and (not client.work_info or client.work_info.work != 1):
                continue
            elif work_filter == 'waiting' and (not client.work_info or client.work_info.work != 0):
                continue
        
        if date_filter and client.work_info and client.work_info.date_status != date_filter:
            continue
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–∏—Å–∫
        if search_query:
            search_text = search_query.lower()
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞
            search_fields = [
                client.sur_name or '',
                client.name or '',
                client.middle_name or '',
                client.telefone or '',
            ]
            
            if client.address:
                search_fields.append(client.address.address or '')
                if client.address.city_info:
                    search_fields.append(client.address.city_info.city_name or '')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
            found = False
            for field in search_fields:
                if search_text in field.lower():
                    found = True
                    break
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—á–µ—Ç–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤
                if len(search_text) > 2 and len(field) > 2:
                    if simple_fuzzy_match(search_text, field) > 70:
                        found = True
                        break
            
            if not found:
                continue
        
        filtered_clients.append(client)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    data = []
    for client in filtered_clients:
        data.append({
            'id': client.id,
            'status': client.work_info.status_name if client.work_info else '–ù–µ —É–∫–∞–∑–∞–Ω',
            'work': client.work_info.work_status_name if client.work_info else '–ù–µ —É–∫–∞–∑–∞–Ω',
            'city': client.address.city_info.city_name if client.address and client.address.city_info else '–ù–µ —É–∫–∞–∑–∞–Ω',
            'address': client.address.address if client.address else '–ù–µ —É–∫–∞–∑–∞–Ω',
            'sur_name': client.sur_name,
            'name': client.name,
            'middle_name': client.middle_name or '',
            'telefone': client.telefone or '',
            'service': client.service_name,
            'date_status': client.work_info.date_status if client.work_info else '',
            'created_at': client.created_at.strftime('%d.%m.%Y') if client.created_at else ''
        })
    
    return jsonify({'data': data})

@bp.route('/client/add')
def add_client():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    cities = City.query.order_by(City.city_name).all()
    return render_template('add_client.html', cities=cities)

@bp.route('/client/add', methods=['POST'])
def add_client_post():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ['sur_name', 'name', 'service', 'city', 'address']
        for field in required_fields:
            if not request.form.get(field, '').strip():
                flash(f'–ü–æ–ª–µ "{field}" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è', 'error')
                return redirect(url_for('main.add_client'))

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        client = Client(
            sur_name=request.form['sur_name'].strip(),
            name=request.form['name'].strip(),
            service=int(request.form['service']),
            middle_name=request.form.get('middle_name', '').strip() or None,
            telefone=request.form.get('telefone', '').strip() or None
        )
        db.session.add(client)
        db.session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID
        
        # –°–æ–∑–¥–∞–µ–º –∞–¥—Ä–µ—Å
        address = AddressInfo(
            id_client=client.id,
            id_city=int(request.form['city']),
            address=request.form['address'].strip()
        )
        db.session.add(address)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        current_date = datetime.now().strftime('%d.%m.%Y')
        work_info = WorkInfo(
            id_client=client.id,
            date_work=current_date,
            date_status=current_date,
            info=request.form.get('info', '').strip()
        )
        db.session.add(work_info)
        
        # –°–æ–∑–¥–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        doc_info = DocInfo(id_client=client.id)
        db.session.add(doc_info)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        doc_fill_info = DocFillInfo(id_client=client.id)
        db.session.add(doc_fill_info)
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        city = City.query.get(address.id_city)
        if city:
            folder_path = create_client_folder(client, city, address.address)
            client.path_folder = folder_path
        
        db.session.commit()
        flash('–ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!', 'success')
        return redirect(url_for('main.index'))
        
    except Exception as e:
        db.session.rollback()
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {str(e)}', 'error')
        return redirect(url_for('main.add_client'))

@bp.route('/client/<int:client_id>')
def edit_client(client_id):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    client = Client.query.get_or_404(client_id)
    cities = City.query.order_by(City.city_name).all()
    return render_template('edit_client.html', client=client, cities=cities)

@bp.route('/client/<int:client_id>', methods=['POST'])
def edit_client_post(client_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    client = Client.query.get_or_404(client_id)
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        old_path = client.path_folder
        old_service = client.service
        old_city_id = client.address.id_city if client.address else None
        old_address = client.address.address if client.address else None
        old_surname = client.sur_name
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –ø—É—Ç—å –∏–∑ —Ñ–æ—Ä–º—ã
        new_path_from_form = request.form.get('path_folder', '').strip() or None
        move_files = 'move_files_on_change' in request.form
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        client.sur_name = request.form['sur_name'].strip()
        client.name = request.form['name'].strip()
        client.middle_name = request.form.get('middle_name', '').strip() or None
        client.telefone = request.form.get('telefone', '').strip() or None
        client.service = int(request.form['service'])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–¥—Ä–µ—Å
        if client.address:
            client.address.id_city = int(request.form['city'])
            client.address.address = request.form['address'].strip()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–±–æ—á—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if client.work_info:
            client.work_info.prepayment = 'prepayment' in request.form
            client.work_info.remains = 'remains' in request.form
            client.work_info.work = int(request.form.get('work', 0))
            client.work_info.status = int(request.form.get('status', 0))
            client.work_info.info = request.form.get('info', '').strip()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—ã –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
            date_work_value = request.form.get('date_work', '').strip()
            if date_work_value:
                client.work_info.date_work = date_work_value
                
            date_status_value = request.form.get('date_status', '').strip()
            if date_status_value:
                client.work_info.date_status = date_status_value
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if client.doc_info:
            client.doc_info.series_pass = request.form.get('series_pass', '').strip() or None
            client.doc_info.date_pass = request.form.get('date_pass', '').strip() or None
            client.doc_info.info_pass = request.form.get('info_pass', '').strip() or None
            client.doc_info.snils = request.form.get('snils', '').strip() or None
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if client.doc_fill_info:
            client.doc_fill_info.date_birthday = request.form.get('date_birthday', '').strip() or None
            client.doc_fill_info.place_residence = request.form.get('place_residence', '').strip() or None
            client.doc_fill_info.extend_work_info = request.form.get('extend_work_info', '').strip() or None
            client.doc_fill_info.approval = 'approval' in request.form
            client.doc_fill_info.contract = 'contract' in request.form
            client.doc_fill_info.contract_agreement = 'contract_agreement' in request.form
            client.doc_fill_info.declaration = 'declaration' in request.form
            client.doc_fill_info.receipt = 'receipt' in request.form
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—É—Ç–∏ –∫ –ø–∞–ø–∫–µ
        path_changed = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏
        new_city_id = int(request.form['city'])
        new_address = request.form['address'].strip()
        new_service = int(request.form['service'])
        new_surname = request.form['sur_name'].strip()
        
        auto_path_changed = (
            old_service != new_service or 
            old_city_id != new_city_id or 
            old_address != new_address or 
            old_surname != new_surname
        )
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–∏–ª –ø—É—Ç—å –≤—Ä—É—á–Ω—É—é
        if new_path_from_form != old_path:
            path_changed = True
            
            if new_path_from_form:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –ø—É—Ç—å
                if not os.path.exists(new_path_from_form):
                    flash(f'–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {new_path_from_form}', 'error')
                    return redirect(url_for('main.edit_client', client_id=client_id))
                
                if not os.path.isdir(new_path_from_form):
                    flash(f'–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ø–∫–æ–π: {new_path_from_form}', 'error')
                    return redirect(url_for('main.edit_client', client_id=client_id))
                
                # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª—ã –∏ —Å—Ç–∞—Ä–∞—è –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if move_files and old_path and os.path.exists(old_path):
                    try:
                        folder_name = os.path.basename(old_path)
                        new_full_path = os.path.join(new_path_from_form, folder_name)
                        
                        # –ò–∑–±–µ–≥–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏–º–µ–Ω
                        counter = 1
                        original_new_path = new_full_path
                        while os.path.exists(new_full_path):
                            new_full_path = f"{original_new_path}_{counter}"
                            counter += 1
                        
                        shutil.move(old_path, new_full_path)
                        client.path_folder = os.path.abspath(new_full_path)
                        flash(f'–ü–∞–ø–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ {new_full_path}', 'success')
                        
                    except Exception as e:
                        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –ø–∞–ø–∫–∏: {str(e)}', 'error')
                        return redirect(url_for('main.edit_client', client_id=client_id))
                else:
                    # –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å
                    client.path_folder = os.path.abspath(new_path_from_form)
                    if move_files and old_path and not os.path.exists(old_path):
                        flash('–ü—É—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω. –°—Ç–∞—Ä–∞—è –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.', 'warning')
                    else:
                        flash('–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω', 'success')
            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—á–∏—Å—Ç–∏–ª –ø—É—Ç—å
                client.path_folder = None
                flash('–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –æ—á–∏—â–µ–Ω', 'info')
        
        # –ï—Å–ª–∏ –ø—É—Ç—å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –≤—Ä—É—á–Ω—É—é, –Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ-–ø—É—Ç–∏
        elif auto_path_changed and old_path and os.path.exists(old_path):
            city = City.query.get(new_city_id)
            if city:
                new_folder_path = create_client_folder(client, city, new_address, move_from=old_path)
                client.path_folder = new_folder_path
                flash('–ü–∞–ø–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏', 'info')
        
        db.session.commit()
        flash('–ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!', 'success')
        return redirect(url_for('main.index'))
        
    except Exception as e:
        db.session.rollback()
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {str(e)}', 'error')
        return redirect(url_for('main.edit_client', client_id=client_id))
    
@bp.route('/client/<int:client_id>/delete', methods=['POST'])
def delete_client(client_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
    client = Client.query.get_or_404(client_id)
    
    try:
        
        db.session.delete(client)
        db.session.commit()
        flash('–ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!', 'success')
        
    except Exception as e:
        db.session.rollback()
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {str(e)}', 'error')
    
    return redirect(url_for('main.index'))

@bp.route('/client/<int:client_id>/work-ready', methods=['POST'])
def mark_work_ready(client_id):
    """–û—Ç–º–µ—Ç–∏—Ç—å —Å—ä—ë–º–∫—É –∫–∞–∫ –≥–æ—Ç–æ–≤—É—é"""
    client = Client.query.get_or_404(client_id)
    
    try:
        if client.work_info:
            client.work_info.work = 1
            client.work_info.date_work = datetime.now().strftime('%d.%m.%Y')
            db.session.commit()
            flash('–°—ä—ë–º–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≥–æ—Ç–æ–≤–∞—è!', 'success')
        else:
            flash('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–±–æ—Ç–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'error')
    except Exception as e:
        db.session.rollback()
        flash(f'–û—à–∏–±–∫–∞: {str(e)}', 'error')
    
    return redirect(url_for('main.edit_client', client_id=client_id))

# –ú–ê–†–®–†–£–¢ –î–õ–Ø –ó–ê–ü–û–õ–ù–ï–ù–ò–Ø –î–û–ö–£–ú–ï–ù–¢–û–í
@bp.route('/client/<int:client_id>/fill-documents', methods=['POST'])
def fill_client_documents(client_id):
    """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    client = Client.query.get_or_404(client_id)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        from app.document_service import document_service
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
        selected_docs = []
        if request.is_json and request.json:
            selected_docs = request.json.get('documents', [])
        else:
            selected_docs = request.form.getlist('documents')
        
        if not selected_docs:
            return jsonify({
                'success': False,
                'errors': ['–ù–µ –≤—ã–±—Ä–∞–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'],
                'filled_documents': [],
                'copied_documents': []
            })
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        result = document_service.fill_client_documents(
            client_id, 
            selected_docs, 
            auto_copy=True  # –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message_parts = []
        if result['copied_documents']:
            message_parts.append(f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã: {', '.join(result['copied_documents'])}")
        if result['filled_documents']:
            message_parts.append(f"–ó–∞–ø–æ–ª–Ω–µ–Ω—ã: {', '.join(result['filled_documents'])}")
        
        return jsonify({
            'success': result['success'],
            'filled_documents': result['filled_documents'],
            'copied_documents': result.get('copied_documents', []),
            'errors': result['errors'],
            'client_folder': result.get('client_folder', ''),
            'message': '; '.join(message_parts) if message_parts else '–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'errors': [f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {str(e)}'],
            'filled_documents': [],
            'copied_documents': []
        })

# –ú–ê–†–®–†–£–¢–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–ê–ü–ö–ê–ú–ò
@bp.route('/client/<int:client_id>/open-folder')
def open_client_folder(client_id):
    """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–ø–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ñ–∞–π–ª–æ–≤–æ–º –º–µ–Ω–µ–¥–∂–µ—Ä–µ"""
    client = Client.query.get_or_404(client_id)
    
    if not client.path_folder:
        flash('–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω', 'error')
        return redirect(url_for('main.edit_client', client_id=client_id))
    
    if not os.path.exists(client.path_folder):
        flash('–ü–∞–ø–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'error')
        return redirect(url_for('main.edit_client', client_id=client_id))
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–ø–∫—É
        system = platform.system()
        
        if system == "Windows":
            # –î–ª—è Windows –∏—Å–ø–æ–ª—å–∑—É–µ–º subprocess –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
            # /select –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–ø–∫—É –∏ –≤—ã–¥–µ–ª—è–µ—Ç –µ—ë –≤ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–µ
            subprocess.run(['explorer', '/select,', client.path_folder], check=True)
        elif system == "Darwin":  # macOS
            subprocess.run(["open", client.path_folder], check=True)
        else:  # Linux –∏ –¥—Ä—É–≥–∏–µ Unix-–ø–æ–¥–æ–±–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
            subprocess.run(["xdg-open", client.path_folder], check=True)
            
        flash('–ü–∞–ø–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –≤ —Ñ–∞–π–ª–æ–≤–æ–º –º–µ–Ω–µ–¥–∂–µ—Ä–µ', 'success')
        
    except Exception as e:
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–ø–∫–∏: {str(e)}', 'error')
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º JSON –æ—Ç–≤–µ—Ç –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –¥–ª—è AJAX –∑–∞–ø—Ä–æ—Å–æ–≤
    if request.headers.get('X-Requested-With') == 'XMLHttpRequest':
        return jsonify({'success': True, 'message': '–ü–∞–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞'})
    
    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥
    return redirect(request.referrer or url_for('main.index'))

@bp.route('/client/<int:client_id>/change-path', methods=['GET', 'POST'])
def change_client_path(client_id):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –ø–∞–ø–∫–µ –∫–ª–∏–µ–Ω—Ç–∞"""
    client = Client.query.get_or_404(client_id)
    
    if request.method == 'GET':
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—É—Ç–∏
        try:
            return render_template('change_path.html', client=client)
        except Exception as e:
            flash(f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {str(e)}', 'error')
            return redirect(url_for('main.edit_client', client_id=client_id))
    
    # POST –º–µ—Ç–æ–¥
    try:
        new_path = request.form.get('new_path', '').strip()
        move_files = 'move_files' in request.form
        
        if not new_path:
            flash('–ù–æ–≤—ã–π –ø—É—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º', 'error')
            return render_template('change_path.html', client=client)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –û–°
        new_path = os.path.normpath(new_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–æ–≤—ã–π –ø—É—Ç—å
        if not os.path.exists(new_path):
            flash('–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'error')
            return render_template('change_path.html', client=client)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π
        if not os.path.isdir(new_path):
            flash('–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π', 'error')
            return render_template('change_path.html', client=client)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not os.access(new_path, os.R_OK | os.W_OK):
            flash('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ', 'error')
            return render_template('change_path.html', client=client)
        
        old_path = client.path_folder
        old_path_exists = old_path and os.path.exists(old_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª—ã
        if move_files and old_path_exists:
            try:
                # –°–æ–∑–¥–∞–µ–º –∏–º—è –ø–∞–ø–∫–∏ –≤ –Ω–æ–≤–æ–º –º–µ—Å—Ç–µ
                folder_name = os.path.basename(old_path)
                new_full_path = os.path.join(new_path, folder_name)
                
                # –ï—Å–ª–∏ –ø–∞–ø–∫–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å
                counter = 1
                original_new_path = new_full_path
                while os.path.exists(new_full_path):
                    new_full_path = f"{original_new_path}_{counter}"
                    counter += 1
                
                # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø–∞–ø–∫—É
                shutil.move(old_path, new_full_path)
                client.path_folder = os.path.abspath(new_full_path)
                flash(f'–ü–∞–ø–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ {new_full_path}', 'success')
                
            except PermissionError:
                flash('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–∞–ø–∫–∏', 'error')
                return render_template('change_path.html', client=client)
            except shutil.Error as e:
                flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –ø–∞–ø–∫–∏: {str(e)}', 'error')
                return render_template('change_path.html', client=client)
            except Exception as e:
                flash(f'–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏: {str(e)}', 'error')
                return render_template('change_path.html', client=client)
        else:
            # –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            client.path_folder = os.path.abspath(new_path)
            
            # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ç–æ–º, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ
            if move_files and old_path and not old_path_exists:
                flash(f'–ü—É—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {new_path}. –°—Ç–∞—Ä–∞—è –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ—ç—Ç–æ–º—É –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.', 'warning')
            elif move_files and not old_path:
                flash(f'–ü—É—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {new_path}. –°—Ç–∞—Ä—ã–π –ø—É—Ç—å –Ω–µ –±—ã–ª —É–∫–∞–∑–∞–Ω, –ø–æ—ç—Ç–æ–º—É –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.', 'warning')
            else:
                flash('–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –∫–ª–∏–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω', 'success')
        
        db.session.commit()
        return redirect(url_for('main.edit_client', client_id=client_id))
        
    except Exception as e:
        db.session.rollback()
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—É—Ç–∏: {str(e)}', 'error')
        return render_template('change_path.html', client=client)
    
@bp.route('/client/<int:client_id>/create-folder', methods=['POST'])
def create_client_folder_route(client_id):
    """–°–æ–∑–¥–∞–Ω–∏–µ/–ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
    client = Client.query.get_or_404(client_id)
    
    try:
        if not client.address:
            flash('–£ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –∞–¥—Ä–µ—Å', 'error')
            return redirect(url_for('main.edit_client', client_id=client_id))
        
        city = City.query.get(client.address.id_city)
        if not city:
            flash('–ì–æ—Ä–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
            return redirect(url_for('main.edit_client', client_id=client_id))
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É
        folder_path = create_client_folder(client, city, client.address.address)
        client.path_folder = folder_path
        
        db.session.commit()
        flash('–ü–∞–ø–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', 'success')
        
    except Exception as e:
        db.session.rollback()
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏: {str(e)}', 'error')
    
    return redirect(url_for('main.edit_client', client_id=client_id))

@bp.route('/client/<int:client_id>/folder-info')
def get_folder_info(client_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–ø–∫–µ –∫–ª–∏–µ–Ω—Ç–∞ (AJAX)"""
    client = Client.query.get_or_404(client_id)
    
    if not client.path_folder:
        return jsonify({
            'exists': False,
            'path': None,
            'files_count': 0,
            'size': 0,
            'message': '–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –Ω–µ —É–∫–∞–∑–∞–Ω'
        })
    
    if not os.path.exists(client.path_folder):
        return jsonify({
            'exists': False,
            'path': client.path_folder,
            'files_count': 0,
            'size': 0,
            'message': '–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        })
    
    try:
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –∏ —Ä–∞–∑–º–µ—Ä
        files_count = 0
        total_size = 0
        
        for root, dirs, files in os.walk(client.path_folder):
            files_count += len(files)
            for file in files:
                file_path = os.path.join(root, file)
                if os.path.exists(file_path):
                    total_size += os.path.getsize(file_path)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä
        if total_size < 1024:
            size_str = f"{total_size} –ë"
        elif total_size < 1024 * 1024:
            size_str = f"{total_size / 1024:.1f} –ö–ë"
        else:
            size_str = f"{total_size / (1024 * 1024):.1f} –ú–ë"
        
        return jsonify({
            'exists': True,
            'path': client.path_folder,
            'files_count': files_count,
            'size': total_size,
            'size_formatted': size_str,
            'message': f'–ü–∞–ø–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç {files_count} —Ñ–∞–π–ª–æ–≤ ({size_str})'
        })
        
    except Exception as e:
        return jsonify({
            'exists': True,
            'path': client.path_folder,
            'files_count': 0,
            'size': 0,
            'message': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}'
        })

@bp.route('/search')
def search():
    """–ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    query_text = request.args.get('q', '').strip()
    if not query_text:
        return redirect(url_for('main.index'))
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –≥–æ—Ä–æ–¥–æ–≤
    all_clients = Client.query.all()
    all_cities = City.query.all()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –Ω–µ—á–µ—Ç–∫–∏–π –ø–æ–∏—Å–∫ –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤
    matching_city_ids = []
    for city in all_cities:
        if simple_fuzzy_match(query_text, city.city_name) > 70:
            matching_city_ids.append(city.id)
    
    filtered_clients = []
    search_text = query_text.lower()
    
    for client in all_clients:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–ª—è—Ö
        matches = [
            search_text in (client.sur_name or '').lower(),
            search_text in (client.name or '').lower(),
            search_text in (client.middle_name or '').lower(),
            search_text in (client.telefone or ''),
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥—Ä–µ—Å
        if client.address:
            matches.append(search_text in (client.address.address or '').lower())
            matches.append(search_text in (client.address.city_info.city_name or '').lower() if client.address.city_info else False)
            matches.append(client.address.id_city in matching_city_ids)
        
        if any(matches):
            filtered_clients.append(client)
    
    return render_template('clients.html', clients=filtered_clients, search_query=query_text)

@bp.route('/city/add', methods=['POST'])
def add_city():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ AJAX"""
    if not request.is_json:
        return jsonify({'success': False, 'message': '–¢—Ä–µ–±—É–µ—Ç—Å—è JSON'})
    
    request_data = request.get_json()
    if not request_data:
        return jsonify({'success': False, 'message': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–ø—Ä–æ—Å–µ'})
    
    city_name = request_data.get('city_name', '').strip()
    
    if not city_name:
        return jsonify({'success': False, 'message': '–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥
    existing_city = City.query.filter_by(city_name=city_name).first()
    if existing_city:
        return jsonify({'success': False, 'message': '–¢–∞–∫–æ–π –≥–æ—Ä–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'})
    
    try:
        city = City(city_name=city_name)
        db.session.add(city)
        db.session.commit()
        
        return jsonify({
            'success': True, 
            'message': '–ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω',
            'city': {'id': city.id, 'name': city.city_name}
        })
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'message': f'–û—à–∏–±–∫–∞: {str(e)}'})

def create_client_folder(client, city, address, move_from=None):
    print("üöÄ –û–¢–õ–ê–î–ö–ê: –í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è settings()")
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    from flask import current_app
    from app.document_service import document_service
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—É—é –ø–∞–ø–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã
    work_folder = current_app.config.get('WORK_FOLDER', './work_files')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ
    folder_path = os.path.join(
        work_folder,
        client.service_name,
        city.city_name,
        f"{address} {client.sur_name}"
    )
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    folder_created = False
    if not os.path.exists(folder_path):
        os.makedirs(folder_path, exist_ok=True)
        folder_created = True
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–∞–ø–∫–∞: {folder_path}")
    
    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–∞–ø–∫—É
    if move_from and os.path.exists(move_from) and move_from != folder_path:
        if os.path.exists(folder_path):
            # –ï—Å–ª–∏ —Ü–µ–ª–µ–≤–∞—è –ø–∞–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º –µ—ë
            shutil.rmtree(folder_path)
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø–∞–ø–∫—É
        shutil.move(move_from, folder_path)
        print(f"‚úÖ –ü–∞–ø–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞: {move_from} -> {folder_path}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å
    abs_folder_path = os.path.abspath(folder_path)
    
    # –ï—Å–ª–∏ –ø–∞–ø–∫–∞ –±—ã–ª–∞ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–∞, –∫–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è —É—Å–ª—É–≥–∏
    if folder_created:
        print(f"üìÑ –ö–æ–ø–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞...")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—É—Ç—å –Ω–∞–ø—Ä—è–º—É—é
            copy_result = document_service.copy_documents_to_folder(
                abs_folder_path, 
                client.service, 
                force_copy=False
            )
            
            if copy_result['success'] and copy_result['copied_files']:
                print(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –¥–æ–∫—É–º–µ–Ω—Ç—ã: {', '.join(copy_result['copied_files'])}")
            elif copy_result['errors']:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∏ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {', '.join(copy_result['errors'])}")
            else:
                print(f"‚ÑπÔ∏è –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏—Å—å (–≤–æ–∑–º–æ–∂–Ω–æ, —à–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã)")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
    
    return abs_folder_path

@bp.route('/settings', methods=['POST'])
def settings_post():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–æ—Ä–º—ã (—É–±—Ä–∞–ª–∏ upload_folder)
        new_database_path = request.form.get('database_path', '').strip()
        new_work_folder = request.form.get('work_folder', '').strip()
        new_docs_folder = request.form.get('docs_folder', '').strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        if not new_database_path:
            flash('–ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω', 'error')
            return redirect(url_for('main.settings'))
        
        if not new_work_folder:
            flash('–†–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞', 'error')
            return redirect(url_for('main.settings'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (—É–±—Ä–∞–ª–∏ upload_folder)
        folders_to_check = [
            ('work_folder', new_work_folder, '–†–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞'),
            ('docs_folder', new_docs_folder, '–ü–∞–ø–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤')
        ]
        
        for folder_key, folder_path, folder_name in folders_to_check:
            if folder_path:
                abs_path = os.path.abspath(folder_path)
                
                # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                if not os.path.exists(abs_path):
                    try:
                        os.makedirs(abs_path, exist_ok=True)
                        flash(f'{folder_name} —Å–æ–∑–¥–∞–Ω–∞: {abs_path}', 'success')
                    except Exception as e:
                        flash(f'–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {folder_name.lower()}: {str(e)}', 'error')
                        return redirect(url_for('main.settings'))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
                if not os.access(abs_path, os.W_OK):
                    flash(f'–ù–µ—Ç –ø—Ä–∞–≤ –∑–∞–ø–∏—Å–∏ –≤ {folder_name.lower()}: {abs_path}', 'error')
                    return redirect(url_for('main.settings'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db_dir = os.path.dirname(os.path.abspath(new_database_path))
        if not os.path.exists(db_dir):
            try:
                os.makedirs(db_dir, exist_ok=True)
                flash(f'–ü–∞–ø–∫–∞ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞: {db_dir}', 'success')
            except Exception as e:
                flash(f'–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ –¥–ª—è –ë–î: {str(e)}', 'error')
                return redirect(url_for('main.settings'))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª
        env_path = os.path.join(os.getcwd(), '.env')
        env_lines = []
        
        # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π .env —Ñ–∞–π–ª
        if os.path.exists(env_path):
            with open(env_path, 'r', encoding='utf-8') as f:
                env_lines = f.readlines()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—É–±—Ä–∞–ª–∏ UPLOAD_FOLDER)
        settings_to_update = {
            'DATABASE_URL': f'sqlite:///{new_database_path}',
            'WORK_FOLDER': new_work_folder,
            'DOCS_FOLDER': new_docs_folder
        }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
        updated_keys = set()
        for i, line in enumerate(env_lines):
            line = line.strip()
            if '=' in line and not line.startswith('#'):
                key = line.split('=')[0].strip()
                if key in settings_to_update:
                    env_lines[i] = f"{key}={settings_to_update[key]}\n"
                    updated_keys.add(key)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–ª—é—á–∏
        for key, value in settings_to_update.items():
            if key not in updated_keys:
                env_lines.append(f"{key}={value}\n")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π .env —Ñ–∞–π–ª
        with open(env_path, 'w', encoding='utf-8') as f:
            f.writelines(env_lines)
        
        flash('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.', 'success')
        return redirect(url_for('main.settings'))
        
    except Exception as e:
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}', 'error')
        return redirect(url_for('main.settings'))

@bp.route('/settings/test-database')
def test_database():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        from app import db
        from app.models import Client
        
        # –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        count = Client.query.count()
        
        return jsonify({
            'success': True,
            'message': f'–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ. –ù–∞–π–¥–µ–Ω–æ {count} –∫–ª–∏–µ–Ω—Ç–æ–≤.',
            'clients_count': count
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'message': f'–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}',
            'error': str(e)
        })

@bp.route('/settings/create-folders', methods=['POST'])
def create_folders():
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–ø–æ–∫"""
    try:
        if request.is_json and request.json is not None:
            folders = request.json.get('folders', [])
        else:
            folders = request.form.getlist('folders')
        
        created_folders = []
        errors = []
        
        for folder_path in folders:
            if folder_path and folder_path.strip():
                abs_path = os.path.abspath(folder_path.strip())
                try:
                    os.makedirs(abs_path, exist_ok=True)
                    created_folders.append(abs_path)
                except Exception as e:
                    errors.append(f'–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {abs_path}: {str(e)}')
        
        return jsonify({
            'success': len(created_folders) > 0,
            'created_folders': created_folders,
            'errors': errors
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'errors': [f'–û—à–∏–±–∫–∞: {str(e)}'],
            'created_folders': []
        })
# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ app/routes.py

@bp.route('/test-static')
def test_static():
    """–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤"""
    import os
    from pathlib import Path
    from flask import current_app, url_for
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Flask
    static_folder = current_app.static_folder or ""
    static_url_path = current_app.static_url_path or ""
    root_path = current_app.root_path or ""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    css_files = ['main.css', 'tables.css', 'forms.css', 'modals.css']
    file_status = {}
    
    for css_file in css_files:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º pathlib –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –ø—É—Ç—è–º–∏
        static_path = Path(static_folder)
        css_path = static_path / 'css' / css_file
        
        file_status[css_file] = {
            'exists': css_path.exists(),
            'path': str(css_path.absolute()),
            'size': css_path.stat().st_size if css_path.exists() else 0,
            'url': url_for('static', filename=f'css/{css_file}')
        }
    
    # –°–æ–±–∏—Ä–∞–µ–º HTML
    html_parts = [
        """<!DOCTYPE html>
<html>
<head>
    <title>–¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤</title>
    <link href=\"""" + url_for('static', filename='css/main.css') + """\" rel="stylesheet">
</head>
<body>
    <h1>–¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤</h1>
    
    <h2>–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Flask:</h2>
    <ul>
        <li><strong>static_folder:</strong> """ + static_folder + """</li>
        <li><strong>static_url_path:</strong> """ + static_url_path + """</li>
        <li><strong>app.root_path:</strong> """ + root_path + """</li>
    </ul>
    
    <h2>–°—Ç–∞—Ç—É—Å CSS —Ñ–∞–π–ª–æ–≤:</h2>
    <ul>"""
    ]
    
    for file_name, status in file_status.items():
        exists_text = "‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç" if status["exists"] else "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω"
        html_parts.append(f"""
        <li>
            <strong>{file_name}:</strong> {exists_text} ({status["size"]} –±–∞–π—Ç)<br>
            –ü—É—Ç—å: <code>{status["path"]}</code><br>
            URL: <a href="{status["url"]}" target="_blank">{status["url"]}</a>
        </li>""")
    
    html_parts.append("""
    </ul>
    
    <h2>–¢–µ—Å—Ç —Å—Ç–∏–ª–µ–π:</h2>
    <p style="color: var(--primary-color, red); font-size: 18px; font-weight: bold;">
        –≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∏–Ω–∏–º (#667eea) –µ—Å–ª–∏ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
    </p>
    
    <div style="background: var(--primary-gradient, red); color: white; padding: 1rem; border-radius: var(--border-radius, 0); margin: 1rem 0;">
        –≠—Ç–æ—Ç –±–ª–æ–∫ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω –µ—Å–ª–∏ CSS –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
    </div>
    
    <h2>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:</h2>
    <ul>""")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    static_path = Path(static_folder)
    checks = [
        ("Static –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", static_path.exists()),
        ("CSS –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", (static_path / 'css').exists()),
        ("–ü—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ static", static_path.exists() and os.access(str(static_path), os.R_OK)),
    ]
    
    for check_name, result in checks:
        status_icon = "‚úÖ" if result else "‚ùå"
        html_parts.append(f"<li>{status_icon} {check_name}</li>")
    
    html_parts.append("""
    </ul>
    
    <h2>–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ CSS –ø–∞–ø–∫–µ:</h2>
    <ul>""")
    
    css_folder = static_path / 'css'
    if css_folder.exists():
        try:
            for css_file in css_folder.iterdir():
                if css_file.is_file():
                    html_parts.append(f"<li>{css_file.name} ({css_file.stat().st_size} –±–∞–π—Ç)</li>")
        except Exception as e:
            html_parts.append(f"<li>–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–ø–∫–∏: {e}</li>")
    else:
        html_parts.append("<li>CSS –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</li>")
    
    html_parts.append("""
    </ul>
</body>
</html>""")
    
    return ''.join(html_parts)
