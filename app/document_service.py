"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
"""
import os
import shutil
import sys
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional, Any, Union
from flask import current_app

# –í–†–ï–ú–ï–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Å–∏—Å—Ç–µ–º–Ω—ã–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º
miniconda_path = r'C:\Users\Boot\miniconda3\lib\site-packages'
if os.path.exists(miniconda_path) and miniconda_path not in sys.path:
    sys.path.insert(0, miniconda_path)
    print(f"üîß –î–æ–±–∞–≤–ª–µ–Ω –ø—É—Ç—å –∫ —Å–∏—Å—Ç–µ–º–Ω—ã–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º: {miniconda_path}")

# –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
HAS_DOCXTPL = False
HAS_OPENPYXL = False
DocxTemplate = None
openpyxl = None

try:
    from docxtpl import DocxTemplate
    HAS_DOCXTPL = True
    print("‚úÖ docxtpl —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except ImportError as e:
    print(f"‚ùå docxtpl –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
    print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: pip install docxtpl")

try:
    import openpyxl
    HAS_OPENPYXL = True
    print("‚úÖ openpyxl —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
except ImportError as e:
    print(f"‚ùå openpyxl –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
    print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: pip install openpyxl")

print(f"üìä –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: docxtpl={HAS_DOCXTPL}, openpyxl={HAS_OPENPYXL}")

from app.models import Client


class DocumentService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        self.docs_folder: Optional[Path] = None
        self.work_folder: Optional[Path] = None
    
    def _init_folders(self) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–ø–æ–∫"""
        if self.docs_folder is None:
            self.docs_folder = Path(current_app.config.get('DOCS_FOLDER', './docs'))
        if self.work_folder is None:
            self.work_folder = Path(current_app.config.get('WORK_FOLDER', './work_files'))
    
    def get_service_documents(self, service_id: int) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —É—Å–ª—É–≥–∏"""
        document_mapping = {
            0: ['–ö–≤–∏—Ç–∞–Ω—Ü–∏—è.xlsx', '–°–æ–≥–ª–∞—Å–∏–µ.docx', '–î–æ–≥–æ–≤–æ—Ä –ø–æ–¥—Ä—è–¥–∞.docx'],  # –ê–∫—Ç –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
            1: ['–ö–≤–∏—Ç–∞–Ω—Ü–∏—è.xlsx', '–°–æ–≥–ª–∞—Å–∏–µ.docx', '–î–æ–≥–æ–≤–æ—Ä –ø–æ–¥—Ä—è–¥–∞.docx'],  # –í—ã–¥–µ–ª
            2: ['–ö–≤–∏—Ç–∞–Ω—Ü–∏—è.xlsx', '–°–æ–≥–ª–∞—Å–∏–µ.docx', '–î–æ–≥–æ–≤–æ—Ä –ø–æ–¥—Ä—è–¥–∞.docx'],  # –í—ã–Ω–æ—Å
            3: ['–ö–≤–∏—Ç–∞–Ω—Ü–∏—è.xlsx', '–°–æ–≥–ª–∞—Å–∏–µ.docx', '–î–æ–≥–æ–≤–æ—Ä –ø–æ–¥—Ä—è–¥–∞.docx'],  # –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
            4: ['–ö–≤–∏—Ç–∞–Ω—Ü–∏—è.xlsx', '–°–æ–≥–ª–∞—Å–∏–µ.docx', '–î–æ–≥–æ–≤–æ—Ä –ø–æ–¥—Ä—è–¥–∞.doc—Ö'],  # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
            5: ['–ö–≤–∏—Ç–∞–Ω—Ü–∏—è.xlsx', '–°–æ–≥–ª–∞—Å–∏–µ.docx', '–î–æ–≥–æ–≤–æ—Ä –ø–æ–¥—Ä—è–¥–∞.docx'],  # –ü–µ—Ä–µ—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            6: ['–ö–≤–∏—Ç–∞–Ω—Ü–∏—è.xlsx', '–°–æ–≥–ª–∞—Å–∏–µ.docx', '–î–æ–≥–æ–≤–æ—Ä –ø–æ–¥—Ä—è–¥–∞.docx'],  # –†–∞–∑–¥–µ–ª
            7: ['–ö–≤–∏—Ç–∞–Ω—Ü–∏—è.xlsx', '–°–æ–≥–ª–∞—Å–∏–µ.docx', '–î–æ–≥–æ–≤–æ—Ä –ø–æ–¥—Ä—è–¥–∞.docx', 
                '–î–µ–∫–ª–∞—Ä–∞—Ü–∏—è.xlsm', '–ê–∫—Ç –∫ –¥–æ–≥–æ–≤–æ—Ä—É –ø–æ–¥—Ä—è–¥–∞.docx'],  # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω
            8: ['–ö–≤–∏—Ç–∞–Ω—Ü–∏—è.xlsx', '–°–æ–≥–ª–∞—Å–∏–µ.docx', '–î–æ–≥–æ–≤–æ—Ä –ø–æ–¥—Ä—è–¥–∞.docx'],  # –£—Ç–æ—á–Ω–µ–Ω–∏–µ
        }
        return document_mapping.get(service_id, [])
    
    def copy_documents_to_folder(self, folder_path: str, service_id: int, force_copy: bool = False) -> Dict[str, Any]:
        """
        –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–∞–ø–∫—É
        
        Args:
            folder_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –∫–ª–∏–µ–Ω—Ç–∞
            service_id: ID —É—Å–ª—É–≥–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω—É–∂–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            force_copy: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        self._init_folders()
        
        if not os.path.exists(folder_path):
            return {
                'success': False,
                'errors': [f'–ü–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {folder_path}'],
                'copied_files': []
            }
        
        if self.docs_folder is None or not self.docs_folder.exists():
            return {
                'success': False,
                'errors': [f'–ü–∞–ø–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.docs_folder}'],
                'copied_files': []
            }
        
        client_folder = Path(folder_path)
        required_docs = self.get_service_documents(service_id)
        
        copied_files = []
        errors = []
        
        for doc_name in required_docs:
            source_path = self.docs_folder / doc_name
            dest_path = client_folder / doc_name
            
            # –ö–æ–ø–∏—Ä—É–µ–º –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
            if source_path.exists() and (not dest_path.exists() or force_copy):
                try:
                    shutil.copy2(source_path, dest_path)
                    copied_files.append(doc_name)
                    print(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {doc_name}")
                except Exception as e:
                    errors.append(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è {doc_name}: {str(e)}")
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è {doc_name}: {e}")
            elif not source_path.exists():
                errors.append(f"–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: {doc_name}")
                print(f"‚ö†Ô∏è –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: {doc_name}")
        
        return {
            'success': len(copied_files) > 0 or len(errors) == 0,
            'copied_files': copied_files,
            'errors': errors
        }

    def copy_documents_to_client_folder(self, client: Client, force_copy: bool = False) -> Dict[str, Any]:
        """
        –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –ø–∞–ø–∫—É –∫–ª–∏–µ–Ω—Ç–∞
        
        Args:
            client: –û–±—ä–µ–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞
            force_copy: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–∂–µ –µ—Å–ª–∏ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        self._init_folders()
        
        if not client.path_folder or not os.path.exists(client.path_folder):
            return {
                'success': False,
                'errors': ['–ü–∞–ø–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'],
                'copied_files': []
            }
        
        if self.docs_folder is None or not self.docs_folder.exists():
            return {
                'success': False,
                'errors': ['–ü–∞–ø–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'],
                'copied_files': []
            }
        
        client_folder = Path(client.path_folder)
        required_docs = self.get_service_documents(client.service)
        
        copied_files = []
        errors = []
        
        for doc_name in required_docs:
            source_path = self.docs_folder / doc_name
            dest_path = client_folder / doc_name
            
            # –ö–æ–ø–∏—Ä—É–µ–º –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
            if source_path.exists() and (not dest_path.exists() or force_copy):
                try:
                    shutil.copy2(source_path, dest_path)
                    copied_files.append(doc_name)
                    print(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {doc_name}")
                except Exception as e:
                    errors.append(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è {doc_name}: {str(e)}")
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è {doc_name}: {e}")
            elif not source_path.exists():
                errors.append(f"–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: {doc_name}")
                print(f"‚ö†Ô∏è –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: {doc_name}")
        
        return {
            'success': len(copied_files) > 0 or len(errors) == 0,
            'copied_files': copied_files,
            'errors': errors
        }
    
    def ensure_documents_in_folder(self, client: Client, required_docs: List[str]) -> Dict[str, Any]:
        """
        –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –Ω—É–∂–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –µ—Å—Ç—å –≤ –ø–∞–ø–∫–µ –∫–ª–∏–µ–Ω—Ç–∞
        –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç
        
        Args:
            client: –û–±—ä–µ–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞
            required_docs: –°–ø–∏—Å–æ–∫ –Ω—É–∂–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        """
        self._init_folders()
        
        if not client.path_folder or not os.path.exists(client.path_folder):
            return {
                'success': False,
                'errors': ['–ü–∞–ø–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'],
                'copied_files': []
            }
        
        client_folder = Path(client.path_folder)
        copied_files = []
        errors = []
        
        # –ú–∞–ø–ø–∏–Ω–≥ –∫–ª—é—á–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∫ —Ñ–∞–π–ª–∞–º
        doc_mapping = {
            'approval': '–°–æ–≥–ª–∞—Å–∏–µ.docx',
            'contract': '–î–æ–≥–æ–≤–æ—Ä –ø–æ–¥—Ä—è–¥–∞.docx',
            'contract_agreement': '–ê–∫—Ç –∫ –¥–æ–≥–æ–≤–æ—Ä—É –ø–æ–¥—Ä—è–¥–∞.docx',
            'declaration': '–î–µ–∫–ª–∞—Ä–∞—Ü–∏—è.xlsm',
            'receipt': '–ö–≤–∏—Ç–∞–Ω—Ü–∏—è.xlsx'
        }
        
        for doc_key in required_docs:
            if doc_key in doc_mapping:
                doc_filename = doc_mapping[doc_key]
                source_path = self.docs_folder / doc_filename
                dest_path = client_folder / doc_filename
                
                # –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç –≤ –ø–∞–ø–∫–µ –∫–ª–∏–µ–Ω—Ç–∞
                if not dest_path.exists():
                    if source_path.exists():
                        try:
                            shutil.copy2(source_path, dest_path)
                            copied_files.append(doc_filename)
                            print(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –Ω—É–∂–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç: {doc_filename}")
                        except Exception as e:
                            errors.append(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è {doc_filename}: {str(e)}")
                    else:
                        errors.append(f"–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: {doc_filename}")
        
        return {
            'success': len(errors) == 0,
            'copied_files': copied_files,
            'errors': errors
        }
    
    def get_context_data(self, client: Client) -> Dict[str, str]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ —à–∞–±–ª–æ–Ω—ã"""
        # –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –¥–æ–≥–æ–≤–æ—Ä–∞
        if client.work_info and client.work_info.date_status:
            contract_date = client.work_info.date_status
        else:
            contract_date = datetime.now().strftime('%d.%m.%Y')
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –¥–ª—è –Ω–æ–º–µ—Ä–∞ –¥–æ–≥–æ–≤–æ—Ä–∞
        try:
            date_parts = contract_date.split('.')
            day = date_parts[0]
            month = date_parts[1]
        except (IndexError, AttributeError):
            day = datetime.now().strftime('%d')
            month = datetime.now().strftime('%m')
        
        context = {
            # –ù–æ–º–µ—Ä –∏ –¥–∞—Ç–∞ –¥–æ–≥–æ–≤–æ—Ä–∞
            'number_contact_agreement': f"{client.id}-{day}/{month}",
            'date_contract_agreement': contract_date,
            
            # –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            'sur_name': client.sur_name or '',
            'name': client.name or '',
            'middle_name': client.middle_name or '',
            'telefone': client.telefone or '',
            
            # –ê–¥—Ä–µ—Å
            'address': client.address.address if client.address else '',
            
            # –ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            'series_pass': client.doc_info.series_pass if client.doc_info else '',
            'date_pass': client.doc_info.date_pass if client.doc_info else '',
            'info_pass': client.doc_info.info_pass if client.doc_info else '',
            'snils': client.doc_info.snils if client.doc_info else '',
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            'date_burn': client.doc_fill_info.date_birthday if client.doc_fill_info else '',
            'place_residence': client.doc_fill_info.place_residence if client.doc_fill_info else '',
            'service_extended': client.doc_fill_info.extend_work_info if client.doc_fill_info else client.service_name,
        }
        
        return context
    
    def fill_word_document(self, template_path: Path, output_path: Path, context: Dict[str, str]) -> bool:
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ Word –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        if not HAS_DOCXTPL or DocxTemplate is None:
            print("‚ùå docxtpl –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
            
        try:
            doc = DocxTemplate(str(template_path))
            doc.render(context)
            doc.save(str(output_path))
            print(f"‚úÖ Word –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {output_path}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Word –¥–æ–∫—É–º–µ–Ω—Ç–∞ {template_path}: {e}")
            return False
    
    def fill_excel_document(self, template_path: Path, output_path: Path, context: Dict[str, str], doc_type: str) -> bool:
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ Excel –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        if not HAS_OPENPYXL or openpyxl is None:
            print("‚ùå openpyxl –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
            
        try:
            wb = openpyxl.load_workbook(str(template_path))
            ws = wb.active
            
            if ws is None:
                print(f"‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {template_path}")
                wb.close()
                return False
            
            if doc_type == '–î–µ–∫–ª–∞—Ä–∞—Ü–∏—è.xlsm':
                # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—é
                ws['Q144'] = context['sur_name']
                ws['Q145'] = context['name']
                ws['Q146'] = context['middle_name']
                ws['AB147'] = context['snils']
                ws['S148'] = context['series_pass']
                cell_d149_value = f"{context['date_pass']} {context['info_pass']}" if context['date_pass'] and context['info_pass'] else ""
                ws['D149'] = cell_d149_value
                
            elif doc_type == '–ö–≤–∏—Ç–∞–Ω—Ü–∏—è.xlsx':
                # –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–≤–∏—Ç–∞–Ω—Ü–∏—é
                full_name = f"{context['sur_name']} {context['name']} {context['middle_name']}".strip()
                ws['C21'] = full_name
                ws['C22'] = context['service_extended']
                ws['B24'] = f"–ü–æ –∞–¥—Ä–µ—Å—É: {context['address']}"
                ws['F14'] = context['number_contact_agreement']
            
            wb.save(str(output_path))
            wb.close()
            print(f"‚úÖ Excel –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {output_path}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel –¥–æ–∫—É–º–µ–Ω—Ç–∞ {template_path}: {e}")
            return False
    
    def fill_client_documents(self, client_id: int, selected_docs: Optional[List[str]] = None, auto_copy: bool = True) -> Dict[str, Any]:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞
        
        Args:
            client_id: ID –∫–ª–∏–µ–Ω—Ç–∞
            selected_docs: –°–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
            auto_copy: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        """
        from app import db
        
        client = Client.query.get(client_id)
        if not client:
            raise ValueError("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        if not client.path_folder or not os.path.exists(client.path_folder):
            raise ValueError("–ü–∞–ø–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫
        if not HAS_DOCXTPL and not HAS_OPENPYXL:
            return {
                'success': False,
                'errors': ['–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install docxtpl openpyxl'],
                'filled_documents': [],
                'copied_documents': []
            }
        
        # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –∞–≤—Ç–æ–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å–Ω–∞—á–∞–ª–∞ –∫–æ–ø–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        copied_documents = []
        copy_errors = []
        
        if auto_copy and selected_docs:
            copy_result = self.ensure_documents_in_folder(client, selected_docs)
            copied_documents = copy_result['copied_files']
            copy_errors = copy_result['errors']
            
            if copy_errors:
                print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏: {copy_errors}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        missing_fields = []
        if not client.doc_info or not client.doc_info.series_pass:
            missing_fields.append("–°–µ—Ä–∏—è/–Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞")
        if not client.doc_info or not client.doc_info.info_pass:
            missing_fields.append("–ö–µ–º –≤—ã–¥–∞–Ω –ø–∞—Å–ø–æ—Ä—Ç")
        if not client.doc_info or not client.doc_info.snils:
            missing_fields.append("–°–ù–ò–õ–°")
        if not client.doc_fill_info or not client.doc_fill_info.extend_work_info:
            missing_fields.append("–ü–æ–¥—Ä–æ–±–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç")
        if not client.doc_fill_info or not client.doc_fill_info.place_residence:
            missing_fields.append("–ú–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è")
        
        if missing_fields:
            raise ValueError(f"–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {', '.join(missing_fields)}")
        
        client_folder = Path(client.path_folder)
        context = self.get_context_data(client)
        
        filled_documents: List[str] = []
        errors: List[str] = copy_errors.copy()  # –ù–∞—á–∏–Ω–∞–µ–º —Å –æ—à–∏–±–æ–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å
        docs_to_fill: Dict[str, str] = {}
        
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ —Ñ–æ—Ä–º—ã
        if selected_docs:
            doc_mapping = {
                'approval': ('–°–æ–≥–ª–∞—Å–∏–µ.docx', '–°–æ–≥–ª–∞—Å–∏–µ.docx'),
                'contract': ('–î–æ–≥–æ–≤–æ—Ä –ø–æ–¥—Ä—è–¥–∞.docx', '–î–æ–≥–æ–≤–æ—Ä –ø–æ–¥—Ä—è–¥–∞.docx'),
                'contract_agreement': ('–ê–∫—Ç –∫ –¥–æ–≥–æ–≤–æ—Ä—É –ø–æ–¥—Ä—è–¥–∞.docx', '–ê–∫—Ç –∫ –¥–æ–≥–æ–≤–æ—Ä—É –ø–æ–¥—Ä—è–¥–∞.docx'),
                'declaration': ('–î–µ–∫–ª–∞—Ä–∞—Ü–∏—è.xlsm', '–î–µ–∫–ª–∞—Ä–∞—Ü–∏—è.xlsm'),
                'receipt': ('–ö–≤–∏—Ç–∞–Ω—Ü–∏—è.xlsx', '–ö–≤–∏—Ç–∞–Ω—Ü–∏—è.xlsx')
            }
            
            for doc_key in selected_docs:
                if doc_key in doc_mapping:
                    template_name, output_name = doc_mapping[doc_key]
                    docs_to_fill[template_name] = output_name
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            if client.doc_fill_info:
                if client.doc_fill_info.approval:
                    docs_to_fill['–°–æ–≥–ª–∞—Å–∏–µ.docx'] = '–°–æ–≥–ª–∞—Å–∏–µ.docx'
                if client.doc_fill_info.contract:
                    docs_to_fill['–î–æ–≥–æ–≤–æ—Ä –ø–æ–¥—Ä—è–¥–∞.docx'] = '–î–æ–≥–æ–≤–æ—Ä –ø–æ–¥—Ä—è–¥–∞.docx'
                if client.doc_fill_info.contract_agreement:
                    docs_to_fill['–ê–∫—Ç –∫ –¥–æ–≥–æ–≤–æ—Ä—É –ø–æ–¥—Ä—è–¥–∞.docx'] = '–ê–∫—Ç –∫ –¥–æ–≥–æ–≤–æ—Ä—É –ø–æ–¥—Ä—è–¥–∞.docx'
                if client.doc_fill_info.declaration:
                    docs_to_fill['–î–µ–∫–ª–∞—Ä–∞—Ü–∏—è.xlsm'] = '–î–µ–∫–ª–∞—Ä–∞—Ü–∏—è.xlsm'
                if client.doc_fill_info.receipt:
                    docs_to_fill['–ö–≤–∏—Ç–∞–Ω—Ü–∏—è.xlsx'] = '–ö–≤–∏—Ç–∞–Ω—Ü–∏—è.xlsx'
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
        for template_name, output_name in docs_to_fill.items():
            template_path = client_folder / template_name
            output_path = client_folder / output_name
            
            if not template_path.exists():
                errors.append(f"–®–∞–±–ª–æ–Ω {template_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ –∫–ª–∏–µ–Ω—Ç–∞")
                continue
            
            success = False
            if template_name.endswith('.docx'):
                if HAS_DOCXTPL:
                    success = self.fill_word_document(template_path, output_path, context)
                else:
                    errors.append(f"–ü—Ä–æ–ø—É—â–µ–Ω {template_name} - docxtpl –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            elif template_name.endswith('.xlsx'):
                if HAS_OPENPYXL:
                    success = self.fill_excel_document(template_path, output_path, context, template_name)
                else:
                    errors.append(f"–ü—Ä–æ–ø—É—â–µ–Ω {template_name} - openpyxl –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
            if success:
                filled_documents.append(output_name)
                print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω: {output_name}")
            else:
                if template_name.endswith('.docx') and HAS_DOCXTPL:
                    errors.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ {template_name}")
                elif template_name.endswith('.xlsx') and HAS_OPENPYXL:
                    errors.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ {template_name}")
        
        return {
            'success': len(filled_documents) > 0,
            'filled_documents': filled_documents,
            'copied_documents': copied_documents,
            'errors': errors,
            'client_folder': str(client_folder)
        }


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
document_service = DocumentService()