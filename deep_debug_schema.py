#!/usr/bin/env python3
"""
–ì–ª—É–±–æ–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""
import sqlite3
import os
import sys

def compare_schemas():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ö–µ–º—ã –ë–î —Å –æ–∂–∏–¥–∞–µ–º–æ–π –º–æ–¥–µ–ª—è–º–∏ Flask"""
    print("üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ö–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î
    conn = sqlite3.connect('kadastr.db')
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' ORDER BY name;")
    real_tables = [row[0] for row in cursor.fetchall()]
    
    print("üìã –†–µ–∞–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –ë–î:")
    for table in real_tables:
        cursor.execute(f"PRAGMA table_info({table})")
        columns = cursor.fetchall()
        
        cursor.execute(f"SELECT COUNT(*) FROM {table}")
        count = cursor.fetchone()[0]
        
        print(f"\n  üè∑Ô∏è {table} ({count} –∑–∞–ø–∏—Å–µ–π):")
        for col in columns:
            col_id, name, type_, notnull, default, pk = col
            print(f"    ‚Ä¢ {name}: {type_} {'(PK)' if pk else ''} {'NOT NULL' if notnull else ''}")
    
    # –û–∂–∏–¥–∞–µ–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –º–æ–¥–µ–ª–µ–π Flask
    expected_tables = {
        'city': ['id', 'city_name'],
        'info_client': ['id', 'sur_name', 'name', 'middle_name', 'telefone', 'path_folder', 'service', 'created_at'],
        'address_info_client': ['id', 'id_client', 'id_city', 'address'],
        'work_info_client': ['id', 'id_client', 'prepayment', 'remains', 'work', 'date_work', 'status', 'date_status', 'info'],
        'doc_info_client': ['id', 'id_client', 'series_pass', 'date_pass', 'info_pass', 'snils'],
        'doc_fill_info': ['id', 'id_client', 'date_birthday', 'place_residence', 'extend_work_info', 'approval', 'contract', 'contract_agreement', 'declaration', 'receipt']
    }
    
    print(f"\nüéØ –û–∂–∏–¥–∞–µ–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –º–æ–¥–µ–ª—è–º–∏ Flask:")
    for table, expected_cols in expected_tables.items():
        print(f"\n  üè∑Ô∏è {table}:")
        print(f"    –û–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(expected_cols)}")
        
        if table in real_tables:
            cursor.execute(f"PRAGMA table_info({table})")
            real_cols = [col[1] for col in cursor.fetchall()]
            
            missing_cols = set(expected_cols) - set(real_cols)
            extra_cols = set(real_cols) - set(expected_cols)
            
            if missing_cols:
                print(f"    ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: {', '.join(missing_cols)}")
            if extra_cols:
                print(f"    ‚ûï –õ–∏—à–Ω–∏–µ: {', '.join(extra_cols)}")
            if not missing_cols and not extra_cols:
                print(f"    ‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
        else:
            print(f"    ‚ùå –¢–∞–±–ª–∏—Ü–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
    
    conn.close()

def check_data_integrity():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"""
    print(f"\nüîó –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö:")
    
    conn = sqlite3.connect('kadastr.db')
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏
    checks = [
        ("–ö–ª–∏–µ–Ω—Ç—ã –±–µ–∑ –∞–¥—Ä–µ—Å–æ–≤", 
         "SELECT COUNT(*) FROM info_client ic LEFT JOIN address_info_client aic ON ic.id = aic.id_client WHERE aic.id_client IS NULL"),
        
        ("–ê–¥—Ä–µ—Å–∞ –±–µ–∑ –∫–ª–∏–µ–Ω—Ç–æ–≤",
         "SELECT COUNT(*) FROM address_info_client aic LEFT JOIN info_client ic ON aic.id_client = ic.id WHERE ic.id IS NULL"),
        
        ("–ö–ª–∏–µ–Ω—Ç—ã –±–µ–∑ —Ä–∞–±–æ—á–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
         "SELECT COUNT(*) FROM info_client ic LEFT JOIN work_info_client wic ON ic.id = wic.id_client WHERE wic.id_client IS NULL"),
        
        ("–ê–¥—Ä–µ—Å–∞ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –≥–æ—Ä–æ–¥–∞–º–∏",
         "SELECT COUNT(*) FROM address_info_client aic LEFT JOIN city c ON aic.id_city = c.id WHERE c.id IS NULL"),
    ]
    
    for check_name, query in checks:
        cursor.execute(query)
        count = cursor.fetchone()[0]
        status = "‚ö†Ô∏è" if count > 0 else "‚úÖ"
        print(f"  {status} {check_name}: {count}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö —Å —Å–≤—è–∑—è–º–∏
    print(f"\nüìä –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö —Å —Å–≤—è–∑—è–º–∏:")
    
    try:
        cursor.execute("""
            SELECT 
                ic.id,
                ic.sur_name,
                ic.name,
                aic.address,
                c.city_name,
                wic.status
            FROM info_client ic
            LEFT JOIN address_info_client aic ON ic.id = aic.id_client
            LEFT JOIN city c ON aic.id_city = c.id
            LEFT JOIN work_info_client wic ON ic.id = wic.id_client
            LIMIT 5
        """)
        
        rows = cursor.fetchall()
        
        if rows:
            print("  –ü–µ—Ä–≤—ã–µ 5 –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π:")
            for row in rows:
                print(f"    {row[0]}: {row[1]} {row[2]} - {row[3]} ({row[4]}) - —Å—Ç–∞—Ç—É—Å: {row[5]}")
        else:
            print("  ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ JOIN –∑–∞–ø—Ä–æ—Å–µ!")
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ JOIN –∑–∞–ø—Ä–æ—Å–∞: {e}")
    
    conn.close()

def test_sqlalchemy_mapping():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ SQLAlchemy"""
    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ SQLAlchemy:")
    
    try:
        sys.path.insert(0, '.')
        os.environ['DATABASE_URL'] = 'sqlite:///kadastr.db'
        
        from app import create_app, db
        from app.models import Client, City, AddressInfo, WorkInfo, DocInfo, DocFillInfo
        
        app = create_app()
        
        with app.app_context():
            # –ü—Ä–æ–±—É–µ–º –ø—Ä—è–º—ã–µ SQL –∑–∞–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ SQLAlchemy
            print("  üîç –ü—Ä—è–º—ã–µ SQL –∑–∞–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ SQLAlchemy:")
            
            # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Å—á–µ—Ç
            result = db.session.execute(db.text("SELECT COUNT(*) FROM info_client")).scalar()
            print(f"    info_client (SQL): {result} –∑–∞–ø–∏—Å–µ–π")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –º–æ–¥–µ–ª–∏ Client
            print(f"  üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏ Client:")
            print(f"    –ò–º—è —Ç–∞–±–ª–∏—Ü—ã: {Client.__tablename__}")
            
            # –ü—Ä–æ–±—É–µ–º —Å—ã—Ä–æ–π –∑–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
            try:
                clients_raw = db.session.execute(
                    db.text("SELECT id, sur_name, name FROM info_client LIMIT 3")
                ).fetchall()
                
                print(f"    –°—ã—Ä–æ–π SQL —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {len(clients_raw)} –∑–∞–ø–∏—Å–µ–π")
                for client in clients_raw:
                    print(f"      {client[0]}: {client[1]} {client[2]}")
                
            except Exception as e:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ —Å—ã—Ä–æ–≥–æ SQL: {e}")
            
            # –ü—Ä–æ–±—É–µ–º ORM –∑–∞–ø—Ä–æ—Å
            try:
                print(f"  üîç ORM –∑–∞–ø—Ä–æ—Å—ã:")
                
                # –°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
                client_count = db.session.query(Client).count()
                print(f"    Client.query.count(): {client_count}")
                
                # –ï—Å–ª–∏ count = 0, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏
                if client_count == 0:
                    print(f"    –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏ –º–∞–ø–ø–∏–Ω–≥–∞...")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å created_at
                    try:
                        first_client = db.session.execute(
                            db.text("SELECT * FROM info_client LIMIT 1")
                        ).fetchone()
                        
                        if first_client:
                            print(f"    –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å (—Å—ã—Ä–∞—è): {dict(first_client._mapping)}")
                            
                            # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç Client –≤—Ä—É—á–Ω—É—é
                            client_data = dict(first_client._mapping)
                            manual_client = Client(
                                sur_name=client_data['sur_name'],
                                name=client_data['name'],
                                service=client_data['service'],
                                middle_name=client_data.get('middle_name'),
                                telefone=client_data.get('telefone'),
                                path_folder=client_data.get('path_folder')
                            )
                            print(f"    –°–æ–∑–¥–∞–Ω –æ–±—ä–µ–∫—Ç Client: {manual_client.full_name}")
                            
                    except Exception as e:
                        print(f"    ‚ùå –û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
                
            except Exception as e:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ ORM: {e}")
        
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SQLAlchemy: {e}")
        import traceback
        traceback.print_exc()

def main():
    print("üî¨ –ì–ª—É–±–æ–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60)
    
    if not os.path.exists('kadastr.db'):
        print("‚ùå –§–∞–π–ª kadastr.db –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    compare_schemas()
    check_data_integrity()
    test_sqlalchemy_mapping()
    
    print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–≤–æ–¥ –≤—ã—à–µ –Ω–∞ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ö–µ–º")
    print("2. –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –æ—à–∏–±–∫–∏ –≤ ORM –∑–∞–ø—Ä–æ—Å–∞—Ö")
    print("3. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –≤ created_at, –≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è")

if __name__ == '__main__':
    main()