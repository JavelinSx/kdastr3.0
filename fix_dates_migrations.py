#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ created_at - –∏—Å–ø–æ–ª—å–∑—É–µ–º date_status –∫–∞–∫ –¥–∞—Ç—É –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞
"""
import sqlite3
import os
from datetime import datetime

def fix_created_at_from_date_status():
    """–ü–µ—Ä–µ–Ω–æ—Å–∏–º date_status –≤ created_at –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é –¥–∞—Ç—É –∑–∞–ø–∏—Å–∏"""
    db_path = "kadastr.db"
    
    if not os.path.exists(db_path):
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ created_at –∏–∑ date_status")
    print("=" * 50)
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        cursor.execute("SELECT COUNT(*) FROM info_client")
        total_clients = cursor.fetchone()[0]
        print(f"üìä –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {total_clients}")
        
        # 2. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞—Ç—ã
        cursor.execute("""
            SELECT c.id, c.sur_name, c.created_at, w.date_status, w.date_work 
            FROM info_client c
            LEFT JOIN work_info_client w ON c.id = w.id_client
            ORDER BY c.id
            LIMIT 5
        """)
        examples = cursor.fetchall()
        print(f"\nüìã –ü—Ä–∏–º–µ—Ä—ã –¢–ï–ö–£–©–ò–• –¥–∞—Ç:")
        for ex in examples:
            print(f"   ID {ex[0]} ({ex[1]}): created_at={ex[2]}, date_status={ex[3]}, date_work={ex[4]}")
        
        # 3. –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞: date_status = –¥–∞—Ç–∞ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞
        print(f"\nüîÑ –û–±–Ω–æ–≤–ª—è—é created_at –∏–∑ date_status (–æ—Å–Ω–æ–≤–Ω–∞—è –¥–∞—Ç–∞ –∑–∞–ø–∏—Å–∏)...")
        
        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º date_status –≤ created_at
        cursor.execute("""
            UPDATE info_client 
            SET created_at = (
                SELECT CASE 
                    WHEN w.date_status IS NOT NULL AND w.date_status != '' AND w.date_status LIKE '__.__.__'
                    THEN datetime(
                        substr(w.date_status, 7, 4) || '-' || 
                        substr(w.date_status, 4, 2) || '-' || 
                        substr(w.date_status, 1, 2) || ' ' ||
                        CASE 
                            WHEN w.status = 1 THEN '14:00:00'  -- –ì–æ—Ç–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã - –¥–Ω–µ–≤–Ω–æ–µ –≤—Ä–µ–º—è
                            ELSE '09:00:00'                    -- –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ - —É—Ç—Ä–µ–Ω–Ω–µ–µ –≤—Ä–µ–º—è  
                        END
                    )
                    ELSE datetime('now')  -- –ï—Å–ª–∏ –Ω–µ—Ç date_status, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                END
                FROM work_info_client w 
                WHERE w.id_client = info_client.id
            )
            WHERE EXISTS (
                SELECT 1 FROM work_info_client w 
                WHERE w.id_client = info_client.id
            )
        """)
        updated_count = cursor.rowcount
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {updated_count}")
        
        # 4. –î–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–µ–∑ work_info_client (–µ—Å–ª–∏ —Ç–∞–∫–∏–µ –µ—Å—Ç—å)
        cursor.execute("""
            UPDATE info_client 
            SET created_at = datetime('now')
            WHERE id NOT IN (
                SELECT DISTINCT id_client FROM work_info_client WHERE id_client IS NOT NULL
            )
        """)
        orphaned_count = cursor.rowcount
        if orphaned_count > 0:
            print(f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç–æ–≤ –±–µ–∑ work_info (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞): {orphaned_count}")
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cursor.execute("""
            SELECT c.id, c.sur_name, c.created_at, w.date_status, w.status
            FROM info_client c
            LEFT JOIN work_info_client w ON c.id = w.id_client
            ORDER BY c.created_at DESC
            LIMIT 10
        """)
        examples_after = cursor.fetchall()
        print(f"\nüìã –ü—Ä–∏–º–µ—Ä—ã –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• –¥–∞—Ç (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ created_at):")
        for ex in examples_after:
            status_text = "–ì–æ—Ç–æ–≤–∞" if ex[4] == 1 else "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞"
            print(f"   {ex[2]}: {ex[1]} (—Å—Ç–∞—Ç—É—Å: {status_text})")
        
        # 6. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–æ–¥–∞–º
        cursor.execute("""
            SELECT 
                strftime('%Y', created_at) as year,
                COUNT(*) as count
            FROM info_client 
            WHERE created_at IS NOT NULL
            GROUP BY strftime('%Y', created_at)
            ORDER BY year DESC
        """)
        yearly_stats = cursor.fetchall()
        print(f"\nüìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–æ–¥–∞–º:")
        for year_stat in yearly_stats:
            print(f"   {year_stat[0]}: {year_stat[1]} –∑–∞–ø–∏—Å–µ–π")
        
        # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –¥–∞—Ç
        cursor.execute("""
            SELECT 
                COUNT(DISTINCT date(created_at)) as unique_dates,
                MIN(date(created_at)) as earliest_date,
                MAX(date(created_at)) as latest_date
            FROM info_client 
            WHERE created_at IS NOT NULL
        """)
        diversity = cursor.fetchone()
        print(f"\nüìä –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –¥–∞—Ç:")
        print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–∞—Ç: {diversity[0]}")
        print(f"   –°–∞–º–∞—è —Ä–∞–Ω–Ω—è—è: {diversity[1]}")
        print(f"   –°–∞–º–∞—è –ø–æ–∑–¥–Ω—è—è: {diversity[2]}")
        
        # 8. –¢–æ–ø –¥–∞—Ç –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
        cursor.execute("""
            SELECT 
                date(created_at) as date, 
                COUNT(*) as count
            FROM info_client 
            WHERE created_at IS NOT NULL
            GROUP BY date(created_at)
            ORDER BY count DESC
            LIMIT 5
        """)
        top_dates = cursor.fetchall()
        print(f"\nüìÖ –¢–æ–ø-5 –¥–∞—Ç –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø–∏—Å–µ–π:")
        for top_date in top_dates:
            print(f"   {top_date[0]}: {top_date[1]} –∑–∞–ø–∏—Å–µ–π")
        
        conn.commit()
        conn.close()
        
        print(f"\n‚úÖ created_at —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω!")
        print(f"üí° –¢–µ–ø–µ—Ä—å created_at = date_status (–¥–∞—Ç–∞ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞)")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def verify_flask_dates():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫ Flask –≤–∏–¥–∏—Ç –¥–∞—Ç—ã –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    print(f"\nüß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ Flask –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
    print("=" * 40)
    
    try:
        from app import create_app, db
        from app.models import Client
        
        app = create_app()
        with app.app_context():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            total = Client.query.count()
            print(f"üìä –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ Flask: {total}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
            recent_clients = Client.query.order_by(Client.created_at.desc()).limit(10).all()
            print(f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π –ø–æ –¥–∞—Ç–µ:")
            for client in recent_clients:
                date_str = client.created_at.strftime('%d.%m.%Y') if client.created_at else '–ù–µ—Ç –¥–∞—Ç—ã'
                print(f"   {date_str}: {client.full_name}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
            oldest_clients = Client.query.order_by(Client.created_at.asc()).limit(5).all()
            print(f"üìã –°–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ 5 –∑–∞–ø–∏—Å–µ–π:")
            for client in oldest_clients:
                date_str = client.created_at.strftime('%d.%m.%Y') if client.created_at else '–ù–µ—Ç –¥–∞—Ç—ã'
                print(f"   {date_str}: {client.full_name}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Flask: {e}")
        return False

def main():
    print("üõ†Ô∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ created_at –∏–∑ date_status")
    print("=" * 60)
    print("üí° date_status –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –∫–æ–¥–µ = –¥–∞—Ç–∞ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞")
    print("üí° –≠—Ç–æ –∏ –µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏!")
    print()
    
    if fix_created_at_from_date_status():
        verify_flask_dates()
        print(f"\n‚ñ∂Ô∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: python run.py")
        print(f"üéâ –¢–µ–ø–µ—Ä—å –¥–∞—Ç—ã –∑–∞–ø–∏—Å–∏ –±—É–¥—É—Ç —Ä–µ–∞–ª—å–Ω—ã–º–∏!")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –¥–∞—Ç—ã")

if __name__ == '__main__':
    main()