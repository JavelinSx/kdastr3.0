#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
"""
import os
import sys
import sqlite3

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.insert(0, '.')

def test_direct_sqlite():
    """–ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ sqlite3"""
    print("üîç –ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ sqlite3:")
    
    db_path = "kadastr.db"
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = cursor.fetchall()
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        
        for table in tables:
            table_name = table[0]
            cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
            count = cursor.fetchone()[0]
            print(f"  ‚Ä¢ {table_name}: {count} –∑–∞–ø–∏—Å–µ–π")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
            if count > 0:
                cursor.execute(f"SELECT * FROM {table_name} LIMIT 3")
                rows = cursor.fetchall()
                print(f"    –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {rows[0] if rows else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ sqlite3: {e}")
        return False

def test_flask_app():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:")
    
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –ë–î
        os.environ['DATABASE_URL'] = 'sqlite:///kadastr.db'
        
        from app import create_app, db
        from app.models import Client, City, AddressInfo, WorkInfo, DocInfo, DocFillInfo
        
        app = create_app()
        
        with app.app_context():
            print(f"üìä –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: {app.config['SQLALCHEMY_DATABASE_URI']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª–∏
            models = [
                ('City', City),
                ('Client', Client), 
                ('AddressInfo', AddressInfo),
                ('WorkInfo', WorkInfo),
                ('DocInfo', DocInfo),
                ('DocFillInfo', DocFillInfo)
            ]
            
            for model_name, model_class in models:
                try:
                    count = model_class.query.count()
                    print(f"  ‚Ä¢ {model_name}: {count} –∑–∞–ø–∏—Å–µ–π")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏
                    if count > 0:
                        first_record = model_class.query.first()
                        print(f"    –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å: {first_record}")
                        
                except Exception as e:
                    print(f"  ‚ùå {model_name}: –û—à–∏–±–∫–∞ - {e}")
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            try:
                clients = db.session.query(Client)\
                    .join(AddressInfo, Client.id == AddressInfo.id_client, isouter=True)\
                    .join(City, AddressInfo.id_city == City.id, isouter=True)\
                    .join(WorkInfo, Client.id == WorkInfo.id_client, isouter=True)\
                    .order_by(Client.created_at.desc())\
                    .all()
                
                print(f"\nüìä –ö–ª–∏–µ–Ω—Ç—ã —Å JOIN –∑–∞–ø—Ä–æ—Å–æ–º: {len(clients)}")
                
                if clients:
                    client = clients[0]
                    print(f"  –ü—Ä–∏–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞: {client.full_name}")
                    print(f"  –ê–¥—Ä–µ—Å: {client.address.address if client.address else '–ù–µ—Ç'}")
                    print(f"  –ì–æ—Ä–æ–¥: {client.address.city_info.city_name if client.address and client.address.city_info else '–ù–µ—Ç'}")
                    print(f"  –°—Ç–∞—Ç—É—Å: {client.work_info.status_name if client.work_info else '–ù–µ—Ç'}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ JOIN –∑–∞–ø—Ä–æ—Å–∞: {e}")
                print(f"–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏—á–∏–Ω–æ–π –ø—É—Å—Ç–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ!")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_api_endpoint():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞:")
    
    try:
        os.environ['DATABASE_URL'] = 'sqlite:///kadastr.db'
        
        from app import create_app
        
        app = create_app()
        
        with app.test_client() as client:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º API –∫–ª–∏–µ–Ω—Ç–æ–≤
            response = client.get('/api/clients')
            
            print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code == 200:
                data = response.get_json()
                if data and 'data' in data:
                    clients_count = len(data['data'])
                    print(f"üìä API –≤–µ—Ä–Ω—É–ª –∫–ª–∏–µ–Ω—Ç–æ–≤: {clients_count}")
                    
                    if clients_count > 0:
                        client_example = data['data'][0]
                        print(f"  –ü—Ä–∏–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ API: {client_example.get('sur_name', 'N/A')} {client_example.get('name', 'N/A')}")
                else:
                    print("üìä API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            else:
                print(f"‚ùå API –æ—à–∏–±–∫–∞: {response.data}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
        return False

def main():
    print("üõ†Ô∏è –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –ë–î
    if not os.path.exists('kadastr.db'):
        print("‚ùå –§–∞–π–ª kadastr.db –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    file_size = os.path.getsize('kadastr.db')
    print(f"üìÅ –§–∞–π–ª –ë–î: kadastr.db ({file_size} –±–∞–π—Ç)")
    
    # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    checks = [
        ("SQLite –Ω–∞–ø—Ä—è–º—É—é", test_direct_sqlite),
        ("Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", test_flask_app),
        ("API —ç–Ω–¥–ø–æ–∏–Ω—Ç", test_api_endpoint)
    ]
    
    for check_name, check_func in checks:
        print(f"\n{'='*20} {check_name} {'='*20}")
        success = check_func()
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if success else '‚ùå –û—à–∏–±–∫–∞'}")

if __name__ == '__main__':
    main()