#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
"""
import os
import sys
from pathlib import Path
import sqlite3

def check_permissions():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞:")
    
    current_dir = os.getcwd()
    print(f"üìÅ –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞: {current_dir}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å
    if os.access(current_dir, os.R_OK):
        print("‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ: –µ—Å—Ç—å")
    else:
        print("‚ùå –ü—Ä–∞–≤–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ: –Ω–µ—Ç")
        return False
    
    if os.access(current_dir, os.W_OK):
        print("‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å: –µ—Å—Ç—å")
    else:
        print("‚ùå –ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å: –Ω–µ—Ç")
        return False
    
    return True

def check_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ë–î
    db_url = os.environ.get('DATABASE_URL', 'sqlite:///database/kadastr.db')
    if db_url.startswith('sqlite:///'):
        db_path = db_url.replace('sqlite:///', '')
        if not os.path.isabs(db_path):
            db_path = os.path.abspath(db_path)
        
        print(f"üìç –ü—É—Ç—å –∫ –ë–î: {db_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É
        db_dir = os.path.dirname(db_path)
        if not os.path.exists(db_dir):
            print(f"üìÅ –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É: {db_dir}")
            try:
                os.makedirs(db_dir, exist_ok=True)
                print("‚úÖ –ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏: {e}")
                return False
        
        # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å/–æ—Ç–∫—Ä—ã—Ç—å –ë–î
        try:
            conn = sqlite3.connect(db_path)
            cursor = conn.cursor()
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
            tables = cursor.fetchall()
            conn.close()
            
            if tables:
                print(f"‚úÖ –ë–î —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–∞–±–ª–∏—Ü: {len(tables)}")
            else:
                print("üìù –ë–î –ø—É—Å—Ç–∞, –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ë–î: {e}")
            return False
    
    return True

def check_folders():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–∏—Ö –ø–∞–ø–æ–∫"""
    print("\nüìÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–∏—Ö –ø–∞–ø–æ–∫:")
    
    folders = {
        'work_files': './work_files',
        'docs': './docs', 
        'uploads': './uploads',
        'database': './database'
    }
    
    for name, path in folders.items():
        abs_path = os.path.abspath(path)
        if os.path.exists(abs_path):
            print(f"‚úÖ {name}: {abs_path}")
        else:
            print(f"üìÅ –°–æ–∑–¥–∞–µ–º {name}: {abs_path}")
            try:
                os.makedirs(abs_path, exist_ok=True)
                print(f"‚úÖ {name} —Å–æ–∑–¥–∞–Ω–∞")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {name}: {e}")
                return False
    
    return True

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:")
    
    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã (–∏–º—è_–ø–∞–∫–µ—Ç–∞: –∏–º—è_–º–æ–¥—É–ª—è)
    required_packages = {
        'flask': 'flask',
        'flask-sqlalchemy': 'flask_sqlalchemy', 
        'flask-migrate': 'flask_migrate',
        'flask-wtf': 'flask_wtf',
        'wtforms': 'wtforms'
    }
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
    optional_packages = {
        'python-dotenv': 'dotenv',
        'docxtpl': 'docxtpl', 
        'openpyxl': 'openpyxl'
    }
    
    missing_required = []
    missing_optional = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ
    for package_name, module_name in required_packages.items():
        try:
            __import__(module_name)
            print(f"‚úÖ {package_name} (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)")
        except ImportError:
            print(f"‚ùå {package_name} (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)")
            missing_required.append(package_name)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ
    for package_name, module_name in optional_packages.items():
        try:
            __import__(module_name)
            print(f"‚úÖ {package_name} (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)")
        except ImportError:
            print(f"‚ö†Ô∏è {package_name} (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π) - –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            missing_optional.append(package_name)
    
    if missing_required:
        print(f"\nüí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:")
        print(f"pip install {' '.join(missing_required)}")
        return False
    
    if missing_optional:
        print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:")
        print(f"pip install {' '.join(missing_optional)}")
        print("(–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é)")
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ö–∞–¥–∞—Å—Ç—Ä–æ–≤–æ–π –ë–î")
    print("=" * 40)
    
    checks = [
        ("–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞", check_permissions),
        ("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", check_dependencies), 
        ("–†–∞–±–æ—á–∏–µ –ø–∞–ø–∫–∏", check_folders),
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", check_database)
    ]
    
    all_passed = True
    
    for check_name, check_func in checks:
        try:
            if not check_func():
                all_passed = False
                print(f"‚ùå {check_name}: –û–®–ò–ë–ö–ê")
            else:
                print(f"‚úÖ {check_name}: –û–ö")
        except Exception as e:
            print(f"‚ùå {check_name}: –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï - {e}")
            all_passed = False
    
    print("\n" + "=" * 40)
    if all_passed:
        print("üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:")
        print("python run.py")
    else:
        print("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.")
    
    return all_passed

if __name__ == '__main__':
    main()