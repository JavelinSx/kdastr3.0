#!/usr/bin/env python3
"""
–ï–¥–∏–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:
1. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã —Ç–∞–±–ª–∏—Ü
2. –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ date_status —Å created_at (–≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏)
3. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
"""
import sqlite3
import os
import shutil
from datetime import datetime, timedelta
import random

def create_backup():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ë–î"""
    db_path = "kadastr.db"
    
    if not os.path.exists(db_path):
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return None
    
    backup_name = f"kadastr_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.db"
    
    try:
        shutil.copy2(db_path, backup_name)
        print(f"üíæ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: {backup_name}")
        return backup_name
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø: {e}")
        return None

def check_column_exists(cursor, table_name, column_name):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
    try:
        cursor.execute(f"PRAGMA table_info({table_name})")
        columns = cursor.fetchall()
        return any(col[1] == column_name for col in columns)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–æ–Ω–∫–∏ {column_name} –≤ {table_name}: {e}")
        return False

def fix_schema_issues(cursor):
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å—Ö–µ–º—ã"""
    print("\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    changes_made = []
    
    # 1. –î–æ–±–∞–≤–ª—è–µ–º created_at –≤ info_client –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if not check_column_exists(cursor, 'info_client', 'created_at'):
        print("  üìÖ –î–æ–±–∞–≤–ª—è–µ–º created_at –≤ info_client...")
        try:
            cursor.execute('ALTER TABLE info_client ADD COLUMN created_at DATETIME')
            changes_made.append("–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ created_at –≤ info_client")
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è created_at: {e}")
    else:
        print("  ‚úÖ created_at —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ info_client")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å—Ö–µ–º—ã
    tables_to_check = {
        'city': ['id', 'city_name'],
        'info_client': ['id', 'sur_name', 'name', 'middle_name', 'telefone', 'path_folder', 'service', 'created_at'],
        'address_info_client': ['id', 'id_client', 'id_city', 'address'],
        'work_info_client': ['id', 'id_client', 'prepayment', 'remains', 'work', 'date_work', 'status', 'date_status', 'info'],
        'doc_info_client': ['id', 'id_client', 'series_pass', 'date_pass', 'info_pass', 'snils'],
        'doc_fill_info': ['id', 'id_client', 'date_birthday', 'place_residence', 'extend_work_info', 'approval', 'contract', 'contract_agreement', 'declaration', 'receipt']
    }
    
    for table_name, expected_columns in tables_to_check.items():
        try:
            cursor.execute(f"SELECT name FROM sqlite_master WHERE type='table' AND name='{table_name}'")
            if not cursor.fetchone():
                print(f"  ‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ {table_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                continue
                
            cursor.execute(f"PRAGMA table_info({table_name})")
            existing_columns = [col[1] for col in cursor.fetchall()]
            
            missing_columns = set(expected_columns) - set(existing_columns)
            if missing_columns:
                print(f"  ‚ö†Ô∏è –í —Ç–∞–±–ª–∏—Ü–µ {table_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing_columns}")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
    
    return changes_made

def parse_date_string(date_str):
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì"""
    if not date_str or not isinstance(date_str, str):
        return None
    
    # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É
    date_str = date_str.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì
    if not date_str or len(date_str) != 10 or date_str.count('.') != 2:
        return None
    
    try:
        parts = date_str.split('.')
        if len(parts) != 3:
            return None
            
        day = int(parts[0])
        month = int(parts[1])
        year = int(parts[2])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π
        if not (1 <= day <= 31 and 1 <= month <= 12 and 2000 <= year <= 2030):
            return None
        
        # –°–æ–∑–¥–∞–µ–º datetime –æ–±—ä–µ–∫—Ç
        dt = datetime(year, month, day)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å (9:00-18:00)
        hour = random.randint(9, 17)
        minute = random.randint(0, 59)
        second = random.randint(0, 59)
        
        return dt.replace(hour=hour, minute=minute, second=second)
        
    except (ValueError, IndexError) as e:
        print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã '{date_str}': {e}")
        return None

def migrate_date_status_to_created_at(cursor):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø–µ—Ä–µ–Ω–æ—Å date_status –≤ created_at"""
    print("\nüîÑ –ü–µ—Ä–µ–Ω–æ—Å date_status –≤ created_at (–¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏)...")
    
    # 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –∏—Ö —Ä–∞–±–æ—á–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    cursor.execute("""
        SELECT c.id, c.sur_name, c.created_at, w.date_status, w.status 
        FROM info_client c
        LEFT JOIN work_info_client w ON c.id = w.id_client
        ORDER BY c.id
    """)
    
    clients = cursor.fetchall()
    total_clients = len(clients)
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {total_clients}")
    
    if total_clients == 0:
        print("‚ùå –ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # 2. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ç–µ–∫—É—â–∏—Ö –¥–∞—Ç
    print(f"\nüìã –ü—Ä–∏–º–µ—Ä—ã –¢–ï–ö–£–©–ò–• –¥–∞—Ç (–ø–µ—Ä–≤—ã–µ 5):")
    for i, client in enumerate(clients[:5]):
        client_id, surname, current_created_at, date_status, status = client
        print(f"   ID {client_id} ({surname}): created_at={current_created_at}, date_status={date_status}")
    
    # 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    updated_count = 0
    failed_count = 0
    fallback_count = 0
    
    # –î–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–µ–∑ date_status –±—É–¥–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–∞—Ç—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 2 –ª–µ—Ç
    base_date = datetime.now() - timedelta(days=730)  # 2 –≥–æ–¥–∞ –Ω–∞–∑–∞–¥
    
    for client_id, surname, current_created_at, date_status, status in clients:
        new_created_at = None
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å date_status
        if date_status:
            new_created_at = parse_date_string(date_status)
            
            if new_created_at:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
                if status == 1:  # –ì–æ—Ç–æ–≤—ã–µ —Ä–∞–±–æ—Ç—ã
                    hour = random.randint(10, 16)  # –î–Ω–µ–≤–Ω–æ–µ –≤—Ä–µ–º—è
                else:  # –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
                    hour = random.randint(9, 12)   # –£—Ç—Ä–µ–Ω–Ω–µ–µ –≤—Ä–µ–º—è
                
                new_created_at = new_created_at.replace(
                    hour=hour,
                    minute=random.randint(0, 59),
                    second=random.randint(0, 59)
                )
        
        # –ï—Å–ª–∏ date_status –Ω–µ –ø–æ–¥–æ—à–µ–ª, —Å–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –¥–∞—Ç—É
        if not new_created_at:
            fallback_count += 1
            # –°–ª—É—á–∞–π–Ω–∞—è –¥–∞—Ç–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 2 –ª–µ—Ç
            days_offset = random.randint(0, 730)
            new_created_at = base_date + timedelta(days=days_offset)
            
            # –°–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å
            new_created_at = new_created_at.replace(
                hour=random.randint(9, 17),
                minute=random.randint(0, 59),
                second=random.randint(0, 59)
            )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        try:
            cursor.execute("""
                UPDATE info_client 
                SET created_at = ? 
                WHERE id = ?
            """, (new_created_at.strftime('%Y-%m-%d %H:%M:%S'), client_id))
            
            updated_count += 1
            
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}: {e}")
            failed_count += 1
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞—Ç:")
    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}")
    print(f"   üìÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω date_status: {updated_count - fallback_count}")
    print(f"   üé≤ –°–ª—É—á–∞–π–Ω—ã–µ –¥–∞—Ç—ã: {fallback_count}")
    print(f"   ‚ùå –û—à–∏–±–∫–∏: {failed_count}")
    
    # 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    cursor.execute("""
        SELECT c.id, c.sur_name, c.created_at, w.date_status, w.status
        FROM info_client c
        LEFT JOIN work_info_client w ON c.id = w.id_client
        ORDER BY c.created_at DESC
        LIMIT 10
    """)
    
    examples_after = cursor.fetchall()
    print(f"\nüìã –ü—Ä–∏–º–µ—Ä—ã –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• –¥–∞—Ç (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ created_at):")
    for client_id, surname, created_at, date_status, status in examples_after:
        status_text = "–ì–æ—Ç–æ–≤–∞" if status == 1 else "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞" if status == 0 else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        source = "date_status" if date_status and parse_date_string(date_status) else "—Å–ª—É—á–∞–π–Ω–∞—è"
        print(f"   {created_at}: {surname} (—Å—Ç–∞—Ç—É—Å: {status_text}, –∏—Å—Ç–æ—á–Ω–∏–∫: {source})")

def fix_orphaned_addresses(cursor):
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –≥–æ—Ä–æ–¥–∞–º–∏"""
    print("\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤...")
    
    # 1. –ù–∞–π–¥–µ–º –∞–¥—Ä–µ—Å–∞ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –≥–æ—Ä–æ–¥–∞–º–∏
    cursor.execute('''
        SELECT a.id, a.id_client, a.id_city, a.address
        FROM address_info_client a
        LEFT JOIN city c ON a.id_city = c.id
        WHERE c.id IS NULL
    ''')
    
    orphaned_addresses = cursor.fetchall()
    
    if not orphaned_addresses:
        print("‚úÖ –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    print(f"   ‚ùå –ù–∞–π–¥–µ–Ω–æ {len(orphaned_addresses)} –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤")
    
    # 2. –°–æ–∑–¥–∞–µ–º "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π" –≥–æ—Ä–æ–¥ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    cursor.execute("SELECT id FROM city WHERE city_name = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'")
    unknown_city = cursor.fetchone()
    
    if not unknown_city:
        print("   üìç –°–æ–∑–¥–∞—é –≥–æ—Ä–æ–¥ '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'...")
        cursor.execute("INSERT INTO city (city_name) VALUES ('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')")
        unknown_city_id = cursor.lastrowid
    else:
        unknown_city_id = unknown_city[0]
    
    # 3. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
    cursor.execute('''
        UPDATE address_info_client 
        SET id_city = ? 
        WHERE id_city NOT IN (SELECT id FROM city)
    ''', (unknown_city_id,))
    
    fixed_count = cursor.rowcount
    print(f"   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥—Ä–µ—Å–æ–≤: {fixed_count}")

def analyze_statistics(cursor):
    """–ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏:")
    
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤
    cursor.execute("SELECT COUNT(*) FROM info_client")
    total_clients = cursor.fetchone()[0]
    print(f"   –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {total_clients}")
    
    # –ö–ª–∏–µ–Ω—Ç—ã —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
    cursor.execute("SELECT COUNT(*) FROM info_client WHERE created_at IS NOT NULL")
    clients_with_dates = cursor.fetchone()[0]
    print(f"   –ö–ª–∏–µ–Ω—Ç–æ–≤ —Å –¥–∞—Ç–∞–º–∏: {clients_with_dates}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–æ–¥–∞–º
    cursor.execute("""
        SELECT 
            strftime('%Y', created_at) as year,
            COUNT(*) as count
        FROM info_client 
        WHERE created_at IS NOT NULL
        GROUP BY strftime('%Y', created_at)
        ORDER BY year DESC
    """)
    yearly_stats = cursor.fetchall()
    print(f"   üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–æ–¥–∞–º:")
    for year, count in yearly_stats:
        print(f"      {year}: {count} –∑–∞–ø–∏—Å–µ–π")
    
    # –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –¥–∞—Ç
    cursor.execute("""
        SELECT 
            COUNT(DISTINCT date(created_at)) as unique_dates,
            MIN(date(created_at)) as earliest_date,
            MAX(date(created_at)) as latest_date
        FROM info_client 
        WHERE created_at IS NOT NULL
    """)
    diversity = cursor.fetchone()
    print(f"   üìä –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –¥–∞—Ç:")
    print(f"      –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–∞—Ç: {diversity[0]}")
    print(f"      –°–∞–º–∞—è —Ä–∞–Ω–Ω—è—è: {diversity[1]}")
    print(f"      –°–∞–º–∞—è –ø–æ–∑–¥–Ω—è—è: {diversity[2]}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å–≤—è–∑–µ–π
    cursor.execute("""
        SELECT COUNT(*) FROM info_client c
        LEFT JOIN address_info_client a ON c.id = a.id_client
        LEFT JOIN city ci ON a.id_city = ci.id
        WHERE ci.id IS NOT NULL
    """)
    clients_with_valid_addresses = cursor.fetchone()[0]
    print(f"   üè† –ö–ª–∏–µ–Ω—Ç–æ–≤ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –∞–¥—Ä–µ—Å–∞–º–∏: {clients_with_valid_addresses}")
    
    if clients_with_valid_addresses != total_clients:
        print(f"   ‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç–æ–≤ –±–µ–∑ –∞–¥—Ä–µ—Å–æ–≤: {total_clients - clients_with_valid_addresses}")

def test_flask_compatibility(cursor):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Flask"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Flask...")
    
    try:
        # –°–∏–º—É–ª—è—Ü–∏—è JOIN –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        cursor.execute("""
            SELECT c.id, c.sur_name, c.name, c.created_at,
                   a.address, ci.city_name,
                   w.status, w.work
            FROM info_client c
            LEFT JOIN address_info_client a ON c.id = a.id_client
            LEFT JOIN city ci ON a.id_city = ci.id
            LEFT JOIN work_info_client w ON c.id = w.id_client
            ORDER BY c.created_at DESC
            LIMIT 5
        """)
        
        test_clients = cursor.fetchall()
        print(f"   ‚úÖ JOIN –∑–∞–ø—Ä–æ—Å —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ª—É—á–µ–Ω–æ {len(test_clients)} –∑–∞–ø–∏—Å–µ–π")
        
        if test_clients:
            print("   üìã –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Flask:")
            for client in test_clients[:3]:
                client_id, surname, name, created_at, address, city, status, work = client
                city_name = city or '–ù–µ—Ç –≥–æ—Ä–æ–¥–∞'
                address_str = address or '–ù–µ—Ç –∞–¥—Ä–µ—Å–∞'
                print(f"      {surname} {name} - {city_name}, {address_str} (–¥–∞—Ç–∞: {created_at})")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Flask: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("üõ†Ô∏è –ï–¥–∏–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ö–∞–¥–∞—Å—Ç—Ä")
    print("=" * 60)
    print("üí° –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞: –ø–µ—Ä–µ–Ω–æ—Å date_status –≤ created_at –∫–∞–∫ –¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ë–î
    if not os.path.exists('kadastr.db'):
        print("‚ùå –§–∞–π–ª kadastr.db –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    file_size = os.path.getsize('kadastr.db')
    print(f"üìÅ –§–∞–π–ª –ë–î: kadastr.db ({file_size} –±–∞–π—Ç)")
    
    # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
    backup_file = create_backup()
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    print("\n‚ö†Ô∏è –ë—É–¥—É—Ç –≤–Ω–µ—Å–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:")
    print("1. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã —Ç–∞–±–ª–∏—Ü")
    print("2. –ü–µ—Ä–µ–Ω–æ—Å date_status –≤ created_at (–æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞)")
    print("3. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤")
    print("4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö")
    
    if backup_file:
        print(f"üíæ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {backup_file}")
    
    choice = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é? (yes/no): ").lower()
    if choice not in ['yes', 'y', '–¥–∞']:
        print("üëã –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    try:
        conn = sqlite3.connect('kadastr.db')
        cursor = conn.cursor()
        
        # 1. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã
        schema_changes = fix_schema_issues(cursor)
        
        # 2. –û–°–ù–û–í–ù–ê–Ø –ó–ê–î–ê–ß–ê: –ü–µ—Ä–µ–Ω–æ—Å date_status –≤ created_at
        migrate_date_status_to_created_at(cursor)
        
        # 3. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
        fix_orphaned_addresses(cursor)
        
        # 4. –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        analyze_statistics(cursor)
        
        # 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Flask —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        flask_ok = test_flask_compatibility(cursor)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        conn.close()
        
        print("\n" + "=" * 60)
        print("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìã –ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:")
        print("‚úÖ –°—Ö–µ–º–∞ —Ç–∞–±–ª–∏—Ü –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
        print("‚úÖ date_status –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ created_at –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤")
        print("‚úÖ –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
        print("‚úÖ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
        
        if flask_ok:
            print("‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å Flask –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
        else:
            print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Flask")
        
        print(f"\n‚ñ∂Ô∏è –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: python run.py")
        
        if backup_file:
            print(f"üíæ –í —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º –º–æ–∂–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑: {backup_file}")
        
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        
        if backup_file:
            print(f"üíæ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–∞–∑—É –∏–∑ –±—ç–∫–∞–ø–∞: {backup_file}")

if __name__ == '__main__':
    main()