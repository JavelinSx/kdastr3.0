#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""
import os
import sys
import sqlite3

def check_database_paths():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—É—Ç–µ–π –∫ –ë–î"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–µ–π –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 50)
    
    # –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞
    current_dir = os.getcwd()
    print(f"üìÅ –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞: {current_dir}")
    
    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print(f"üîß DATABASE_URL: {os.environ.get('DATABASE_URL', '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê')}")
    
    # –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –∫ –ë–î
    possible_paths = [
        'kadastr.db',                           # –í –∫–æ—Ä–Ω–µ
        'database/kadastr.db',                  # –í –ø–∞–ø–∫–µ database
        os.path.join(current_dir, 'kadastr.db'), # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é
        os.path.join(current_dir, 'database', 'kadastr.db'), # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ database
    ]
    
    print(f"\nüìÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ë–î:")
    
    for path in possible_paths:
        abs_path = os.path.abspath(path)
        exists = os.path.exists(path)
        
        if exists:
            size = os.path.getsize(path)
            print(f"  ‚úÖ {path} -> {abs_path} ({size} –±–∞–π—Ç)")
            
            # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            try:
                conn = sqlite3.connect(path)
                cursor = conn.cursor()
                cursor.execute("SELECT COUNT(*) FROM info_client")
                count = cursor.fetchone()[0]
                conn.close()
                print(f"     üìä –ö–ª–∏–µ–Ω—Ç–æ–≤ –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ: {count}")
            except Exception as e:
                print(f"     ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
        else:
            print(f"  ‚ùå {path} -> –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢")

def check_flask_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Flask"""
    print(f"\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Flask:")
    
    try:
        sys.path.insert(0, '.')
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
        os.environ['DATABASE_URL'] = 'sqlite:///kadastr.db'
        
        from app import create_app
        
        app = create_app()
        
        print(f"üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:")
        print(f"  SQLALCHEMY_DATABASE_URI: {app.config.get('SQLALCHEMY_DATABASE_URI')}")
        print(f"  SQLALCHEMY_TRACK_MODIFICATIONS: {app.config.get('SQLALCHEMY_TRACK_MODIFICATIONS')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–æ–π —Ñ–∞–π–ª –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        db_uri = app.config.get('SQLALCHEMY_DATABASE_URI', '')
        if db_uri.startswith('sqlite:///'):
            db_path_from_uri = db_uri.replace('sqlite:///', '')
            abs_db_path = os.path.abspath(db_path_from_uri)
            
            print(f"  üìÅ –ü—É—Ç—å –∫ –ë–î –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞: {db_path_from_uri}")
            print(f"  üìÅ –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å: {abs_db_path}")
            print(f"  üìÇ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists(abs_db_path)}")
            
            if os.path.exists(abs_db_path):
                size = os.path.getsize(abs_db_path)
                print(f"  üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {size} –±–∞–π—Ç")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è Flask
                try:
                    conn = sqlite3.connect(abs_db_path)
                    cursor = conn.cursor()
                    cursor.execute("SELECT COUNT(*) FROM info_client")
                    count = cursor.fetchone()[0]
                    conn.close()
                    print(f"  üìä –ö–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ Flask: {count}")
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ Flask: {e}")
        
        return app
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return None

def test_direct_flask_db():
    """–ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Flask DB"""
    print(f"\nüß™ –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Flask DB:")
    
    app = check_flask_config()
    if not app:
        return
    
    try:
        from app import db
        from app.models import Client
        
        with app.app_context():
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
            print(f"  üîó –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º engine
            engine = db.engine
            print(f"  ‚öôÔ∏è Engine URL: {engine.url}")
            
            # –ü—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            with engine.connect() as connection:
                result = connection.execute(db.text("SELECT COUNT(*) FROM info_client"))
                count = result.scalar()
                print(f"  üìä –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ engine: {count} –∫–ª–∏–µ–Ω—Ç–æ–≤")
                
                # –ï—Å–ª–∏ count = 0, –≤–æ–∑–º–æ–∂–Ω–æ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if count == 0:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
                    result = connection.execute(db.text("SELECT name FROM sqlite_master WHERE type='table'"))
                    tables = result.fetchall()
                    print(f"  üìã –¢–∞–±–ª–∏—Ü—ã –≤ –ë–î —á–µ—Ä–µ–∑ engine: {[t[0] for t in tables]}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ info_client
                    try:
                        result = connection.execute(db.text("SELECT * FROM info_client LIMIT 1"))
                        first_row = result.fetchone()
                        if first_row:
                            print(f"  üìÑ –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å info_client: {dict(first_row._mapping)}")
                        else:
                            print(f"  üìÑ –¢–∞–±–ª–∏—Ü–∞ info_client –ø—É—Å—Ç–∞")
                    except Exception as e:
                        print(f"  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è info_client: {e}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Flask DB: {e}")
        import traceback
        traceback.print_exc()

def find_all_db_files():
    """–ü–æ–∏—Å–∫ –≤—Å–µ—Ö .db —Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ"""
    print(f"\nüîç –ü–æ–∏—Å–∫ –≤—Å–µ—Ö .db —Ñ–∞–π–ª–æ–≤:")
    
    db_files = []
    for root, dirs, files in os.walk('.'):
        for file in files:
            if file.endswith('.db'):
                full_path = os.path.join(root, file)
                abs_path = os.path.abspath(full_path)
                size = os.path.getsize(full_path)
                
                db_files.append((full_path, abs_path, size))
    
    if db_files:
        print(f"  –ù–∞–π–¥–µ–Ω–æ .db —Ñ–∞–π–ª–æ–≤: {len(db_files)}")
        for rel_path, abs_path, size in db_files:
            print(f"  üìÑ {rel_path} -> {abs_path} ({size} –±–∞–π—Ç)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            try:
                conn = sqlite3.connect(rel_path)
                cursor = conn.cursor()
                cursor.execute("SELECT COUNT(*) FROM info_client")
                count = cursor.fetchone()[0]
                conn.close()
                print(f"     üìä –ö–ª–∏–µ–Ω—Ç–æ–≤: {count}")
            except Exception as e:
                print(f"     ‚ùå –û—à–∏–±–∫–∞: {e}")
    else:
        print(f"  ‚ùå .db —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")

def main():
    print("üî¨ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60)
    
    check_database_paths()
    find_all_db_files()
    test_direct_flask_db()
    
    print(f"\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Flask –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É")
    print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ")
    print("3. –ï—Å–ª–∏ Flask –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –ø—É—Å—Ç–æ–º—É —Ñ–∞–π–ª—É - –∏–∑–º–µ–Ω–∏—Ç–µ DATABASE_URL")

if __name__ == '__main__':
    main()