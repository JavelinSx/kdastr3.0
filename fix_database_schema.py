#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –Ω–æ–≤—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏
"""
import sqlite3
import os
from datetime import datetime

def backup_database():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ë–î"""
    backup_name = f"kadastr_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.db"
    try:
        import shutil
        shutil.copy2('kadastr.db', backup_name)
        print(f"üíæ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: {backup_name}")
        return backup_name
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø: {e}")
        return None

def check_column_exists(cursor, table_name, column_name):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
    cursor.execute(f"PRAGMA table_info({table_name})")
    columns = cursor.fetchall()
    return any(col[1] == column_name for col in columns)

def add_missing_columns():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫"""
    print("üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫...")
    
    try:
        conn = sqlite3.connect('kadastr.db')
        cursor = conn.cursor()
        
        changes_made = []
        
        # 1. –î–æ–±–∞–≤–ª—è–µ–º created_at –≤ info_client –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not check_column_exists(cursor, 'info_client', 'created_at'):
            print("  üìÖ –î–æ–±–∞–≤–ª—è–µ–º created_at –≤ info_client...")
            cursor.execute('ALTER TABLE info_client ADD COLUMN created_at DATETIME')
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –¥–ª—è –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
            cursor.execute("UPDATE info_client SET created_at = datetime('now') WHERE created_at IS NULL")
            changes_made.append("created_at –¥–æ–±–∞–≤–ª–µ–Ω –≤ info_client")
        else:
            print("  ‚úÖ created_at —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ info_client")
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ
        cursor.execute("PRAGMA foreign_keys = ON")
        
        conn.commit()
        conn.close()
        
        if changes_made:
            print("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã:")
            for change in changes_made:
                print(f"  ‚Ä¢ {change}")
        else:
            print("‚úÖ –°—Ö–µ–º–∞ –ë–î —É–∂–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–æ–¥–µ–ª—è–º")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ö–µ–º—ã: {e}")
        return False

def test_models_after_fix():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
    
    try:
        import sys
        sys.path.insert(0, '.')
        
        os.environ['DATABASE_URL'] = 'sqlite:///kadastr.db'
        
        from app import create_app, db
        from app.models import Client, City, AddressInfo, WorkInfo, DocInfo, DocFillInfo
        
        app = create_app()
        
        with app.app_context():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Ç–µ–ø–µ—Ä—å –≤–∏–¥–Ω—ã
            models_data = [
                ('City', City),
                ('Client', Client),
                ('AddressInfo', AddressInfo), 
                ('WorkInfo', WorkInfo),
                ('DocInfo', DocInfo),
                ('DocFillInfo', DocFillInfo)
            ]
            
            for model_name, model_class in models_data:
                try:
                    count = model_class.query.count()
                    print(f"  üìä {model_name}: {count} –∑–∞–ø–∏—Å–µ–π")
                    
                    if count > 0 and model_name == 'Client':
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                        first_client = model_class.query.first()
                        print(f"    –ü—Ä–∏–º–µ—Ä: {first_client.full_name}")
                        
                except Exception as e:
                    print(f"  ‚ùå {model_name}: {e}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º JOIN –∑–∞–ø—Ä–æ—Å –∏–∑ routes.py
            try:
                clients = db.session.query(Client)\
                    .join(AddressInfo, Client.id == AddressInfo.id_client, isouter=True)\
                    .join(City, AddressInfo.id_city == City.id, isouter=True)\
                    .join(WorkInfo, Client.id == WorkInfo.id_client, isouter=True)\
                    .order_by(Client.created_at.desc())\
                    .limit(5)\
                    .all()
                
                print(f"  üîó JOIN –∑–∞–ø—Ä–æ—Å –≤–µ—Ä–Ω—É–ª: {len(clients)} –∫–ª–∏–µ–Ω—Ç–æ–≤")
                
                if clients:
                    for i, client in enumerate(clients[:3], 1):
                        city_name = client.address.city_info.city_name if client.address and client.address.city_info else '–ù–µ—Ç –≥–æ—Ä–æ–¥–∞'
                        print(f"    {i}. {client.full_name} - {city_name}")
                
            except Exception as e:
                print(f"  ‚ùå JOIN –∑–∞–ø—Ä–æ—Å: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    print("üõ†Ô∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 50)
    
    if not os.path.exists('kadastr.db'):
        print("‚ùå –§–∞–π–ª kadastr.db –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    file_size = os.path.getsize('kadastr.db')
    print(f"üìÅ –§–∞–π–ª –ë–î: kadastr.db ({file_size} –±–∞–π—Ç)")
    
    # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
    backup_file = backup_database()
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    print("\n‚ö†Ô∏è –ë—É–¥—É—Ç –≤–Ω–µ—Å–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø!")
    
    choice = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ").lower()
    if choice not in ['yes', 'y', '–¥–∞']:
        print("üëã –û—Ç–º–µ–Ω–µ–Ω–æ")
        return
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if add_missing_columns():
        print("\n‚úÖ –°—Ö–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if test_models_after_fix():
            print("\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            print("‚ñ∂Ô∏è –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: python run.py")
            
            if backup_file:
                print(f"üíæ –ë—ç–∫–∞–ø —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫: {backup_file}")
        else:
            print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã –æ—Å—Ç–∞–ª–∏—Å—å. –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ö–µ–º—É")
        if backup_file:
            print(f"üíæ –ë—ç–∫–∞–ø –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {backup_file}")

if __name__ == '__main__':
    main()